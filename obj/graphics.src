; Zilog eZ80 ANSI C Compiler Release 3.4
; -optsize -noreduceopt -nomodsect -peephole -globalopt
; -localcse -const=ROM 
	FILE	"SRC\GRAPHICS.C"
	.assume ADL=1
	SEGMENT CODE
;    1	/*
;    2	* --------------------------------------
;    3	* Program Name : Tower Takeover Calculator for TI - 84 CE
;    4	* Author : Thomas Ji
;    5	* License : N / A
;    6	* Description : Takes input from the user, showing the best possible movesand the results of all possible actions in Tower Takeover, by Vex.
;    7	* --------------------------------------
;    8	*/
;    9	
;   10	#include "graphics.h"
;   11	
;   12	#define FONT_HEIGHT 8
;   13	
;   14	int8_t indexOf(int8_t arr[], int8_t val, uint8_t indices) {
_indexOf:
	LD	HL,-1
	CALL	__frameset
;   15		uint8_t i;
;   16		for (i = 0; i < indices; i++)
	LD	(IX+-1),0
	JR	L_4
L_2:
;   17			if (arr[i] == val) {
	LD	A,(IX+-1)
	UEXT	HL
	LD	L,A
	LD	BC,(IX+6)
	ADD	HL,BC
	LD	A,(HL)
	CP	A,(IX+9)
	JR	NZ,L_3
;   18				//arr[i] = -127;
;   19				return i;
	LD	A,(IX+-1)
	JR	L_6
;   20			}
L_3:
	INC	(IX+-1)
L_4:
	LD	A,(IX+-1)
	CP	A,(IX+12)
	JR	C,L_2
;   21		return -1;	
	LD	A,255
;   22	}
L_6:
	LD	SP,IX
	POP	IX
	RET	


;**************************** _indexOf ***************************
;Name                         Addr/Register   Size   Type
;i                                     IX-1      1   variable
;indices                              IX+12      1   parameter
;val                                   IX+9      1   parameter
;arr                                   IX+6      3   parameter


; Stack Frame Size: 16 (bytes)
;       Spill Code: 0 (instruction)


;   23	
;   24	void swap(int8_t *xp, int8_t *yp) 
;   25	{ 
_swap:
	LD	HL,-1
	CALL	__frameset
;   26	    int8_t temp = *xp; 
	LD	HL,(IX+6)
	LD	A,(HL)
	LD	(IX+-1),A
;   27	    *xp = *yp; 
	LD	HL,(IX+9)
	LD	A,(HL)
	LD	HL,(IX+6)
	LD	(HL),A
;   28	    *yp = temp; 
	LD	HL,(IX+9)
	LD	A,(IX+-1)
	LD	(HL),A
;   29	} 
	LD	SP,IX
	POP	IX
	RET	


;**************************** _swap ***************************
;Name                         Addr/Register   Size   Type
;temp                                  IX-1      1   variable
;yp                                    IX+9      3   parameter
;xp                                    IX+6      3   parameter


; Stack Frame Size: 13 (bytes)
;       Spill Code: 0 (instruction)


;   30	  
;   31	void selectionSort(int8_t arr[], uint8_t n) 
;   32	{ 
_selectionSort:
	LD	HL,-3
	CALL	__frameset
;   33	    uint8_t i, j, min_idx; 
;   34	  
;   35	    // One by one move boundary of unsorted subarray 
;   36	    for (i = 0; i < n-1; i++) 
	LD	(IX+-1),0
	JR	L_17
L_15:
;   37	    { 
;   38	        // Find the minimum element in unsorted array 
;   39	        min_idx = i; 
	LD	A,(IX+-1)
	LD	(IX+-3),A
;   40	        for (j = i+1; j < n; j++) 
	LD	A,(IX+-1)
	INC	A
	LD	(IX+-2),A
	JR	L_13
L_11:
;   41	          if (arr[j] < arr[min_idx]) 
	LD	A,(IX+-2)
	UEXT	HL
	LD	L,A
	LD	BC,(IX+6)
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IX+-3)
	UEXT	HL
	LD	L,A
	LD	BC,(IX+6)
	ADD	HL,BC
	LD	A,(IY)
	CP	A,(HL)
	CALL	__setflag
	JP	P,L_12
;   42	            min_idx = j; 
	LD	A,(IX+-2)
	LD	(IX+-3),A
L_12:
	INC	(IX+-2)
L_13:
	LD	A,(IX+-2)
	CP	A,(IX+9)
	JR	C,L_11
;   43	  
;   44	        // Swap the found minimum element with the first element 
;   45	        swap(&arr[min_idx], &arr[i]); 
	LD	A,(IX+-1)
	UEXT	HL
	LD	L,A
	LD	BC,(IX+6)
	ADD	HL,BC
	PUSH	HL
	LD	A,(IX+-3)
	UEXT	HL
	LD	L,A
	LD	BC,(IX+6)
	ADD	HL,BC
	PUSH	HL
	CALL	_swap
	POP	BC
	POP	BC
	INC	(IX+-1)
;   46	    } 
L_17:
	LD	A,(IX+9)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	DEC	BC
	LD	A,(IX+-1)
	UEXT	HL
	LD	L,A
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_15
;   47	} 
	LD	SP,IX
	POP	IX
	RET	


;**************************** _selectionSort ***************************
;Name                         Addr/Register   Size   Type
;min_idx                               IX-3      1   variable
;j                                     IX-2      1   variable
;i                                     IX-1      1   variable
;n                                     IX+9      1   parameter
;arr                                   IX+6      3   parameter


; Stack Frame Size: 15 (bytes)
;       Spill Code: 0 (instruction)


;   48	
;   49	void initGUI(void) {
_initGUI:
	LD	HL,-9
	CALL	__frameset
;   50		uint8_t i = 0;
;   51		uint8_t j = 0;
;   52	
;   53	
;   54	 gfx_SetTransparentColor(WHITE);
	LD	BC,248
	PUSH	BC
	CALL	_gfx_SetTransparentColor
	POP	BC
;   55	
;   56	
;   57		/* Initialize the 8bpp graphics */;
;   58		gfx_SetPalette(symbols_gfx_pal, sizeof_symbols_gfx_pal, 0);
	LD	BC,0
	PUSH	BC
	LD	BC,512
	PUSH	BC
	LD	BC,_symbols_gfx_pal
	PUSH	BC
	CALL	_gfx_SetPalette
	POP	BC
	POP	BC
	POP	BC
;   59	
;   60		//Fill the screen white
;   61		gfx_FillScreen(WHITE);
	LD	BC,248
	PUSH	BC
	CALL	_gfx_FillScreen
	POP	BC
;   62	
;   63		//DRAWINGS: Creates the box surrounding everything
;   64		gfx_SetColor(BLACK);//Black
	LD	BC,247
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;   65		gfx_Rectangle_NoClip(0, 0, 165, 224);
	LD	BC,224
	PUSH	BC
	LD	BC,165
	PUSH	BC
	LD	BC,0
	PUSH	BC
	PUSH	BC
	CALL	_gfx_Rectangle_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;   66		gfx_Rectangle_NoClip(1, 1, 163, 222);
	LD	BC,222
	PUSH	BC
	LD	BC,163
	PUSH	BC
	LD	BC,1
	PUSH	BC
	PUSH	BC
	CALL	_gfx_Rectangle_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;   67		for (i = 0; i < 16; i++) //Makes all horizontal lines
	LD	(IX+-1),0
	JR	L_29
L_27:
;   68			switch (i)
	LD	A,(IX+-1)
	UEXT	HL
	LD	L,A
	CALL	__case8
L__8:
	DW	6
	DB	0
	DW24	L_20	

	DB	3
	DW24	L_21	

	DB	6
	DW24	L_22	

	DB	7
	DW24	L_23	

	DB	10
	DW24	L_24	

	DB	13
	DW24	L_25	

	DW24	L_26	

;   69			{
;   70			case 0: case 3: case 6: case 7: case 10: case 13:
L_20:
L_21:
L_22:
L_23:
L_24:
L_25:
;   71				gfx_HorizLine_NoClip(2, 14 + i * (13), 161);
	LD	B,13
	LD	DE,161
	PUSH	DE
	LD	C,(IX+-1)
	MLT	BC
	LD	A,C
	ADD	A,14
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,2
	PUSH	BC
	CALL	_gfx_HorizLine_NoClip
	POP	BC
	POP	BC
	POP	BC
;   72				gfx_HorizLine_NoClip(2, 15 + i * (13), 161);
	LD	B,13
	LD	DE,161
	PUSH	DE
	LD	C,(IX+-1)
	MLT	BC
	LD	A,C
	ADD	A,15
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,2
	PUSH	BC
	CALL	_gfx_HorizLine_NoClip
	POP	BC
	POP	BC
	POP	BC
;   73				break;
	JR	L_28
;   74			default:
L_26:
;   75				gfx_HorizLine_NoClip(41, 14 + i * (13), 122);
	LD	B,13
	LD	DE,122
	PUSH	DE
	LD	C,(IX+-1)
	MLT	BC
	LD	A,C
	ADD	A,14
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,41
	PUSH	BC
	CALL	_gfx_HorizLine_NoClip
	POP	BC
	POP	BC
	POP	BC
;   76				gfx_HorizLine_NoClip(41, 15 + i * (13), 122);
	LD	B,13
	LD	DE,122
	PUSH	DE
	LD	C,(IX+-1)
	MLT	BC
	LD	A,C
	ADD	A,15
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,41
	PUSH	BC
	CALL	_gfx_HorizLine_NoClip
	POP	BC
	POP	BC
	POP	BC
;   77				break;
;   78			}
L_28:
	INC	(IX+-1)
L_29:
	LD	A,(IX+-1)
	CP	A,16
	JR	C,L_27
;   79	
;   80	
;   81		gfx_VertLine_NoClip(39, 2, 220);
	LD	BC,220
	PUSH	BC
	LD	BC,2
	PUSH	BC
	LD	BC,39
	PUSH	BC
	CALL	_gfx_VertLine_NoClip
	POP	BC
	POP	BC
	POP	BC
;   82		gfx_VertLine_NoClip(40, 2, 220);
	LD	BC,220
	PUSH	BC
	LD	BC,2
	PUSH	BC
	LD	BC,40
	PUSH	BC
	CALL	_gfx_VertLine_NoClip
	POP	BC
	POP	BC
	POP	BC
;   83		gfx_VertLine_NoClip(86, 2, 51);
	LD	BC,51
	PUSH	BC
	LD	BC,2
	PUSH	BC
	LD	BC,86
	PUSH	BC
	CALL	_gfx_VertLine_NoClip
	POP	BC
	POP	BC
	POP	BC
;   84		gfx_VertLine_NoClip(87, 2, 51);
	LD	BC,51
	PUSH	BC
	LD	BC,2
	PUSH	BC
	LD	BC,87
	PUSH	BC
	CALL	_gfx_VertLine_NoClip
	POP	BC
	POP	BC
	POP	BC
;   85		gfx_VertLine_NoClip(86, 94, 128);
	LD	BC,128
	PUSH	BC
	LD	BC,94
	PUSH	BC
	LD	BC,86
	PUSH	BC
	CALL	_gfx_VertLine_NoClip
	POP	BC
	POP	BC
	POP	BC
;   86		gfx_VertLine_NoClip(87, 94, 128);
	LD	BC,128
	PUSH	BC
	LD	BC,94
	PUSH	BC
	LD	BC,87
	PUSH	BC
	CALL	_gfx_VertLine_NoClip
	POP	BC
	POP	BC
	POP	BC
;   87		gfx_VertLine_NoClip(133, 2, 220);
	LD	BC,220
	PUSH	BC
	LD	BC,2
	PUSH	BC
	LD	BC,133
	PUSH	BC
	CALL	_gfx_VertLine_NoClip
	POP	BC
	POP	BC
	POP	BC
;   88		gfx_VertLine_NoClip(134, 2, 220);
	LD	BC,220
	PUSH	BC
	LD	BC,2
	PUSH	BC
	LD	BC,134
	PUSH	BC
	CALL	_gfx_VertLine_NoClip
	POP	BC
	POP	BC
	POP	BC
;   89	
;   90		//Colored Text Boxes
;   91		//Top boxes, team and delta box
;   92		gfx_TransparentSprite_NoClip(neutralTeamBox, 41, 2);
	LD	BC,2
	PUSH	BC
	LD	BC,41
	PUSH	BC
	LD	BC,_neutralTeamBox_data
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;   93		gfx_TransparentSprite_NoClip(neutralTeamBox, 88, 2);
	LD	BC,2
	PUSH	BC
	LD	BC,88
	PUSH	BC
	LD	BC,_neutralTeamBox_data
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;   94		spriteCentered(deltaTextBox, 135, 2, 162, 13, deltaTextBox_width, deltaTextBox_height);
	LD	BC,12
	PUSH	BC
	LD	BC,28
	PUSH	BC
	LD	BC,13
	PUSH	BC
	LD	BC,162
	PUSH	BC
	LD	BC,2
	PUSH	BC
	LD	BC,135
	PUSH	BC
	LD	BC,_deltaTextBox_data
	PUSH	BC
	CALL	_spriteCentered
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;   95		//First 6 normal orange/green/purple boxes
;   96		gfx_TransparentSprite_NoClip(orangeTextBox, 41, 16);
	LD	BC,16
	PUSH	BC
	LD	BC,41
	PUSH	BC
	LD	BC,_orangeTextBox_data
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;   97		gfx_TransparentSprite_NoClip(orangeTextBox, 88, 16);
	LD	BC,16
	PUSH	BC
	LD	BC,88
	PUSH	BC
	LD	BC,_orangeTextBox_data
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;   98		gfx_TransparentSprite_NoClip(greenTextBox, 41, 29);
	LD	BC,29
	PUSH	BC
	LD	BC,41
	PUSH	BC
	LD	BC,_greenTextBox_data
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;   99		gfx_TransparentSprite_NoClip(greenTextBox, 88, 29);
	LD	BC,29
	PUSH	BC
	LD	BC,88
	PUSH	BC
	LD	BC,_greenTextBox_data
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  100		gfx_TransparentSprite_NoClip(purpleTextBox, 41, 42);
	LD	BC,42
	PUSH	BC
	LD	BC,41
	PUSH	BC
	LD	BC,_purpleTextBox_data
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  101		gfx_TransparentSprite_NoClip(purpleTextBox, 88, 42);
	LD	BC,42
	PUSH	BC
	LD	BC,88
	PUSH	BC
	LD	BC,_purpleTextBox_data
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  102		//The three long orange/green/purple boxes
;  103		gfx_TransparentSprite_NoClip(orangeTextBoxLong, 41, 55);
	LD	BC,55
	PUSH	BC
	LD	BC,41
	PUSH	BC
	LD	BC,_orangeTextBoxLong_data
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  104		gfx_TransparentSprite_NoClip(greenTextBoxLong, 41, 68);
	LD	BC,68
	PUSH	BC
	LD	BC,41
	PUSH	BC
	LD	BC,_greenTextBoxLong_data
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  105		gfx_TransparentSprite_NoClip(purpleTextBoxLong, 41, 81);
	LD	BC,81
	PUSH	BC
	LD	BC,41
	PUSH	BC
	LD	BC,_purpleTextBoxLong_data
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  106		//The red text boxes, along with the other 27 orange/green/purple boxes
;  107		for (i = 0; i < 10; i++)
	LD	(IX+-1),0
	JR	L_44
L_42:
;  108			switch (i)
	LD	A,(IX+-1)
	UEXT	HL
	LD	L,A
	CALL	__seqcase
L__10:
	DW	9
	DW	1
	DB	0
	DW24	L_32	

	DW24	L_35	

	DW24	L_38	

	DW24	L_33	

	DW24	L_36	

	DW24	L_39	

	DW24	L_34	

	DW24	L_37	

	DW24	L_40	

	DW24	L_41	

;  109			{
;  110			case 1: case 4: case 7:
L_32:
L_33:
L_34:
;  111				gfx_TransparentSprite_NoClip(orangeTextBox, 41, 94 + i * 13);
	LD	B,13
	LD	C,(IX+-1)
	MLT	BC
	LD	A,C
	ADD	A,94
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,41
	PUSH	BC
	LD	BC,_orangeTextBox_data
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  112				gfx_TransparentSprite_NoClip(orangeTextBox, 88, 94 + i * 13);
	LD	B,13
	LD	C,(IX+-1)
	MLT	BC
	LD	A,C
	ADD	A,94
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,88
	PUSH	BC
	LD	BC,_orangeTextBox_data
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  113				gfx_TransparentSprite_NoClip(shortOrangeTextBox, 135, 94 + i * 13);
	LD	B,13
	LD	C,(IX+-1)
	MLT	BC
	LD	A,C
	ADD	A,94
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,135
	PUSH	BC
	LD	BC,_shortOrangeTextBox_data
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  114				break;
	JR	L_43
;  115			case 2: case 5: case 8:
L_35:
L_36:
L_37:
;  116				gfx_TransparentSprite_NoClip(greenTextBox, 41, 94 + i * 13);
	LD	B,13
	LD	C,(IX+-1)
	MLT	BC
	LD	A,C
	ADD	A,94
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,41
	PUSH	BC
	LD	BC,_greenTextBox_data
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  117				gfx_TransparentSprite_NoClip(greenTextBox, 88, 94 + i * 13);
	LD	B,13
	LD	C,(IX+-1)
	MLT	BC
	LD	A,C
	ADD	A,94
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,88
	PUSH	BC
	LD	BC,_greenTextBox_data
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  118				gfx_TransparentSprite_NoClip(shortGreenTextBox, 135, 94 + i * 13);
	LD	B,13
	LD	C,(IX+-1)
	MLT	BC
	LD	A,C
	ADD	A,94
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,135
	PUSH	BC
	LD	BC,_shortGreenTextBox_data
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  119				break;
	JR	L_43
;  120			case 3: case 6: case 9:
L_38:
L_39:
L_40:
;  121				gfx_TransparentSprite_NoClip(purpleTextBox, 41, 94 + i * 13);
	LD	B,13
	LD	C,(IX+-1)
	MLT	BC
	LD	A,C
	ADD	A,94
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,41
	PUSH	BC
	LD	BC,_purpleTextBox_data
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  122				gfx_TransparentSprite_NoClip(purpleTextBox, 88, 94 + i * 13);
	LD	B,13
	LD	C,(IX+-1)
	MLT	BC
	LD	A,C
	ADD	A,94
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,88
	PUSH	BC
	LD	BC,_purpleTextBox_data
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  123				gfx_TransparentSprite_NoClip(shortPurpleTextBox, 135, 94 + i * 13);
	LD	B,13
	LD	C,(IX+-1)
	MLT	BC
	LD	A,C
	ADD	A,94
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,135
	PUSH	BC
	LD	BC,_shortPurpleTextBox_data
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  124				break;
	JR	L_43
;  125			default:
L_41:
;  126				gfx_TransparentSprite_NoClip(redTextBox, 41, 94);
	LD	BC,94
	PUSH	BC
	LD	BC,41
	PUSH	BC
	LD	BC,_redTextBox_data
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  127				gfx_TransparentSprite_NoClip(redTextBox, 88, 94);
	LD	BC,94
	PUSH	BC
	LD	BC,88
	PUSH	BC
	LD	BC,_redTextBox_data
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  128				gfx_TransparentSprite_NoClip(shortRedTextBox, 135, 94);
	LD	BC,94
	PUSH	BC
	LD	BC,135
	PUSH	BC
	LD	BC,_shortRedTextBox_data
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  129				break;
;  130			}
L_43:
	INC	(IX+-1)
L_44:
	LD	A,(IX+-1)
	CP	A,10
	JR	C,L_42
;  131		
;  132		//Gray box
;  133		gfx_SetColor(gray);
	LD	BC,255
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  134		gfx_FillRectangle_NoClip(135, 16, 28, 76);
	LD	BC,76
	PUSH	BC
	LD	BC,28
	PUSH	BC
	LD	BC,16
	PUSH	BC
	LD	BC,135
	PUSH	BC
	CALL	_gfx_FillRectangle_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  135	
;  136		//Black text, along with some of the sprited texts
;  137		gfx_SetTextFGColor(BLACK);
	LD	BC,247
	PUSH	BC
	CALL	_gfx_SetTextFGColor
	POP	BC
;  138		printStringCentered("SCO", 2, 94, 38, 104, gfx_GetStringWidth("SCO"), FONT_HEIGHT);
	LD	BC,8
	PUSH	BC
	LD	BC,L__12
	PUSH	BC
	CALL	_gfx_GetStringWidth
	POP	BC
	PUSH	HL
	LD	BC,104
	PUSH	BC
	LD	BC,38
	PUSH	BC
	LD	BC,94
	PUSH	BC
	LD	BC,2
	PUSH	BC
	LD	BC,L__13
	PUSH	BC
	CALL	_printStringCentered
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  139		printStringCentered("Team", 2, 2, 38, 13, gfx_GetStringWidth("Team"), FONT_HEIGHT);
	LD	BC,8
	PUSH	BC
	LD	BC,L__14
	PUSH	BC
	CALL	_gfx_GetStringWidth
	POP	BC
	PUSH	HL
	LD	BC,13
	PUSH	BC
	LD	BC,38
	PUSH	BC
	LD	BC,2
	PUSH	BC
	PUSH	BC
	LD	BC,L__15
	PUSH	BC
	CALL	_printStringCentered
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  140		printStringCentered("Ally", 41, 2, 85, 13, gfx_GetStringWidth("Ally"), FONT_HEIGHT);
	LD	BC,8
	PUSH	BC
	LD	BC,L__16
	PUSH	BC
	CALL	_gfx_GetStringWidth
	POP	BC
	PUSH	HL
	LD	BC,13
	PUSH	BC
	LD	BC,85
	PUSH	BC
	LD	BC,2
	PUSH	BC
	LD	BC,41
	PUSH	BC
	LD	BC,L__17
	PUSH	BC
	CALL	_printStringCentered
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  141		printStringCentered("Enemy", 88, 2, 132, 13, gfx_GetStringWidth("Enemy"), FONT_HEIGHT);
	LD	BC,8
	PUSH	BC
	LD	BC,L__18
	PUSH	BC
	CALL	_gfx_GetStringWidth
	POP	BC
	PUSH	HL
	LD	BC,13
	PUSH	BC
	LD	BC,132
	PUSH	BC
	LD	BC,2
	PUSH	BC
	LD	BC,88
	PUSH	BC
	LD	BC,L__19
	PUSH	BC
	CALL	_printStringCentered
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  142		gfx_TransparentSprite_NoClip(deltaXText, 141, 4);
	LD	BC,4
	PUSH	BC
	LD	BC,141
	PUSH	BC
	LD	BC,_deltaXText_data
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  143		for (i = 0; i < 2; i++)
	LD	(IX+-1),0
	JR	L_53
L_51:
;  144			for (j = 0; j < 10; j++)
	LD	(IX+-2),0
	LD	C,(IX+-1)
	LD	B,0
	LD	HL,BC
	LD.LIS	BC,47
	CALL	__smulu
	LD	(IX+-4),L
	LD	(IX+-3),H
	JR	L_50
L_48:
;  145				printStringCentered("000", 41 + 47 * i, 94 + 13 * j, 85 + 47 * i, 104 + 13 * j, gfx_GetStringWidth("000"), FONT_HEIGHT);
	LD	C,(IX+-2)
	LD	DE,8
	PUSH	DE
	LD	DE,L__20
	PUSH	DE
	LD	B,0
	LD	HL,BC
	LD.LIS	BC,13
	CALL	__smulu
	LD	BC,HL
	LD	(IX+-9),BC
	CALL	_gfx_GetStringWidth
	LD	BC,(IX+-9)
	POP	DE
	PUSH	HL
	LD	IY,BC
	LEA	DE,IY+104
	PUSH	DE
	LD	IY,(IX+-4)
	LEA	DE,IY+85
	PUSH	DE
	LD	IY,BC
	LEA	BC,IY+94
	PUSH	BC
	LD	IY,(IX+-4)
	LEA	BC,IY+41
	PUSH	BC
	LD	BC,L__21
	PUSH	BC
	CALL	_printStringCentered
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	INC	(IX+-2)
L_50:
	LD	A,(IX+-2)
	CP	A,10
	JR	C,L_48
	INC	(IX+-1)
L_53:
	LD	A,(IX+-1)
	CP	A,2
	JR	C,L_51
;  146	
;  147		for (i = 0; i < 2; i++)
	LD	(IX+-1),0
	JR	L_61
L_59:
;  148			for (j = 0; j < 3; j++)
	LD	(IX+-2),0
	LD	C,(IX+-1)
	LD	B,0
	LD	HL,BC
	LD.LIS	BC,47
	CALL	__smulu
	LD	(IX+-6),L
	LD	(IX+-5),H
	JR	L_58
L_56:
;  149				printStringCentered("00", 41 + 47 * i, 16 + 13 * j, 85 + 47 * i, 26 + 13 * j, gfx_GetStringWidth("00"), FONT_HEIGHT);
	LD	C,(IX+-2)
	LD	DE,8
	PUSH	DE
	LD	DE,L__24
	PUSH	DE
	LD	B,0
	LD	HL,BC
	LD.LIS	BC,13
	CALL	__smulu
	LD	BC,HL
	LD	(IX+-9),BC
	CALL	_gfx_GetStringWidth
	LD	BC,(IX+-9)
	POP	DE
	PUSH	HL
	LD	IY,BC
	LEA	DE,IY+26
	PUSH	DE
	LD	IY,(IX+-6)
	LEA	DE,IY+85
	PUSH	DE
	LD	IY,BC
	LEA	BC,IY+16
	PUSH	BC
	LD	IY,(IX+-6)
	LEA	BC,IY+41
	PUSH	BC
	LD	BC,L__25
	PUSH	BC
	CALL	_printStringCentered
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	INC	(IX+-2)
L_58:
	LD	A,(IX+-2)
	CP	A,3
	JR	C,L_56
	INC	(IX+-1)
L_61:
	LD	A,(IX+-1)
	CP	A,2
	JR	C,L_59
;  150	
;  151		for (i = 0; i < 3; i++)
	LD	(IX+-1),0
	JR	L_66
L_64:
;  152			printStringCentered("0", 41, 55 + 13 * i, 132, 65 + 13 * i, gfx_GetStringWidth("0"), FONT_HEIGHT);
	LD	C,(IX+-1)
	LD	DE,8
	PUSH	DE
	LD	DE,L__28
	PUSH	DE
	LD	B,0
	LD	HL,BC
	LD.LIS	BC,13
	CALL	__smulu
	LD	BC,HL
	LD	(IX+-9),BC
	CALL	_gfx_GetStringWidth
	LD	BC,(IX+-9)
	POP	DE
	PUSH	HL
	LD	IY,BC
	LEA	DE,IY+65
	PUSH	DE
	LD	IY,BC
	LD	BC,132
	PUSH	BC
	LEA	BC,IY+55
	PUSH	BC
	LD	BC,41
	PUSH	BC
	LD	BC,L__29
	PUSH	BC
	CALL	_printStringCentered
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	INC	(IX+-1)
L_66:
	LD	A,(IX+-1)
	CP	A,3
	JR	C,L_64
;  153	
;  154		for (i = 0; i < 10; i++)
	LD	(IX+-1),0
	JR	L_71
L_69:
;  155			spriteCentered(plusMinusZero, 135, 94 + i * 13, 162, 104 + i * 13, plusMinusZero_width, plusMinusZero_height);
	LD	C,(IX+-1)
	LD	B,0
	LD.LIS	HL,13
	CALL	__smulu
	LD	BC,7
	PUSH	BC
	LD	IY,HL
	LD	BC,22
	PUSH	BC
	LEA	BC,IY+104
	PUSH	BC
	LD	IY,HL
	LD	BC,162
	PUSH	BC
	LEA	BC,IY+94
	PUSH	BC
	LD	BC,135
	PUSH	BC
	LD	BC,_plusMinusZero_data
	PUSH	BC
	CALL	_spriteCentered
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	INC	(IX+-1)
L_71:
	LD	A,(IX+-1)
	CP	A,10
	JR	C,L_69
;  156	
;  157		//Side symbols
;  158		gfx_TransparentSprite_NoClip(genericCube, 2, 16);
	LD	BC,16
	PUSH	BC
	LD	BC,2
	PUSH	BC
	LD	BC,_genericCube_data
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  159		gfx_TransparentSprite_NoClip(emptyTower, 2, 55);
	LD	BC,55
	PUSH	BC
	LD	BC,2
	PUSH	BC
	LD	BC,_emptyTower_data
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  160		gfx_TransparentSprite_NoClip(stackedCube, 2, 107);
	LD	BC,107
	PUSH	BC
	LD	BC,2
	PUSH	BC
	LD	BC,_stackedCube_data
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  161		gfx_TransparentSprite_NoClip(towerAdd, 2, 146);
	LD	BC,146
	PUSH	BC
	LD	BC,2
	PUSH	BC
	LD	BC,_towerAdd_data
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  162		gfx_TransparentSprite_NoClip(towerRemove, 2, 185);
	LD	BC,185
	PUSH	BC
	LD	BC,2
	PUSH	BC
	LD	BC,_towerRemove_data
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  163	
;  164		//Bottom panels
;  165		for (i = 0; i < 5; i++)
	LD	(IX+-1),0
	JR	L_77
L_75:
;  166			gfx_TransparentSprite_NoClip(bottomPanel, 64 * i, 224);
	LD	BC,224
	PUSH	BC
	LD	A,(IX+-1)
	UEXT	HL
	LD	L,A
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	PUSH	HL
	LD	BC,_bottomPanel_data
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
	INC	(IX+-1)
L_77:
	LD	A,(IX+-1)
	CP	A,5
	JR	C,L_75
;  167		gfx_TransparentSprite_NoClip(genericTeamColor, 12, 227);
	LD	BC,227
	PUSH	BC
	LD	BC,12
	PUSH	BC
	LD	BC,_genericTeamColor_data
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  168		printStringCentered("Reset", 194, 226, 253, 237, gfx_GetStringWidth("Reset"), FONT_HEIGHT);
	LD	BC,8
	PUSH	BC
	LD	BC,L__33
	PUSH	BC
	CALL	_gfx_GetStringWidth
	POP	BC
	PUSH	HL
	LD	BC,237
	PUSH	BC
	LD	BC,253
	PUSH	BC
	LD	BC,226
	PUSH	BC
	LD	BC,194
	PUSH	BC
	LD	BC,L__34
	PUSH	BC
	CALL	_printStringCentered
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  169		gfx_PrintStringXY("Quit", 275, 228); //This really should be "printStringCentered" but for some reason this had some issues
	LD	BC,228
	PUSH	BC
	LD	BC,275
	PUSH	BC
	LD	BC,L__35
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  170	
;  171		//Auton Boxes
;  172		gfx_SetColor(BLACK);//Black
	LD	BC,247
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  173		gfx_Rectangle_NoClip(168, 2, 14, 15);
	LD	BC,15
	PUSH	BC
	LD	BC,14
	PUSH	BC
	LD	BC,2
	PUSH	BC
	LD	BC,168
	PUSH	BC
	CALL	_gfx_Rectangle_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  174		gfx_Rectangle_NoClip(169, 3, 12, 13);
	LD	BC,13
	PUSH	BC
	LD	BC,12
	PUSH	BC
	LD	BC,3
	PUSH	BC
	LD	BC,169
	PUSH	BC
	CALL	_gfx_Rectangle_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  175		gfx_TransparentSprite_NoClip(genericAuton, 170, 4);
	LD	BC,4
	PUSH	BC
	LD	BC,170
	PUSH	BC
	LD	BC,_genericAuton_data
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  176		gfx_TransparentSprite_NoClip(autonA, 172, 6);
	LD	BC,6
	PUSH	BC
	LD	BC,172
	PUSH	BC
	LD	BC,_autonA_data
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  177		gfx_Rectangle_NoClip(183, 2, 14, 15);
	LD	BC,15
	PUSH	BC
	LD	BC,14
	PUSH	BC
	LD	BC,2
	PUSH	BC
	LD	BC,183
	PUSH	BC
	CALL	_gfx_Rectangle_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  178		gfx_Rectangle_NoClip(184, 3, 12, 13);
	LD	BC,13
	PUSH	BC
	LD	BC,12
	PUSH	BC
	LD	BC,3
	PUSH	BC
	LD	BC,184
	PUSH	BC
	CALL	_gfx_Rectangle_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  179		gfx_TransparentSprite_NoClip(genericAuton, 185, 4);
	LD	BC,4
	PUSH	BC
	LD	BC,185
	PUSH	BC
	LD	BC,_genericAuton_data
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  180		gfx_TransparentSprite_NoClip(autonE, 187, 6);
	LD	BC,6
	PUSH	BC
	LD	BC,187
	PUSH	BC
	LD	BC,_autonE_data
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  181		gfx_Rectangle_NoClip(176, 18, 14, 15);
	LD	BC,15
	PUSH	BC
	LD	BC,14
	PUSH	BC
	LD	BC,18
	PUSH	BC
	LD	BC,176
	PUSH	BC
	CALL	_gfx_Rectangle_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  182		gfx_Rectangle_NoClip(177, 19, 12, 13);
	LD	BC,13
	PUSH	BC
	LD	BC,12
	PUSH	BC
	LD	BC,19
	PUSH	BC
	LD	BC,177
	PUSH	BC
	CALL	_gfx_Rectangle_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  183		gfx_TransparentSprite_NoClip(greenAuton, 178, 20);
	LD	BC,20
	PUSH	BC
	LD	BC,178
	PUSH	BC
	LD	BC,_greenAuton_data
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  184		gfx_TransparentSprite_NoClip(autonT, 180, 22);
	LD	BC,22
	PUSH	BC
	LD	BC,180
	PUSH	BC
	LD	BC,_autonT_data
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  185	
;  186	
;  187		for (i = 0; i < 3; i++)
	LD	(IX+-1),0
	JR	L_82
L_80:
;  188		{
;  189			gfx_Rectangle_NoClip(175 + 47 * i, 92, 41, 54);
	LD	BC,54
	PUSH	BC
	LD	BC,41
	PUSH	BC
	LD	BC,92
	PUSH	BC
	LD	A,(IX+-1)
	UEXT	HL
	LD	L,A
	LD	A,47
	CALL	__imul_b
	LD	BC,175
	ADD	HL,BC
	PUSH	HL
	CALL	_gfx_Rectangle_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  190			gfx_Rectangle_NoClip(176 + 47 * i, 93, 39, 52);
	LD	BC,52
	PUSH	BC
	LD	BC,39
	PUSH	BC
	LD	BC,93
	PUSH	BC
	LD	A,(IX+-1)
	UEXT	HL
	LD	L,A
	LD	A,47
	CALL	__imul_b
	LD	BC,176
	ADD	HL,BC
	PUSH	HL
	CALL	_gfx_Rectangle_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  191			gfx_HorizLine_NoClip(177 + 47 * i, 131, 37);
	LD	BC,37
	PUSH	BC
	LD	BC,131
	PUSH	BC
	LD	A,(IX+-1)
	UEXT	HL
	LD	L,A
	LD	A,47
	CALL	__imul_b
	LD	BC,177
	ADD	HL,BC
	PUSH	HL
	CALL	_gfx_HorizLine_NoClip
	POP	BC
	POP	BC
	POP	BC
;  192			gfx_HorizLine_NoClip(177 + 47 * i, 132, 37);
	LD	BC,37
	PUSH	BC
	LD	BC,132
	PUSH	BC
	LD	A,(IX+-1)
	UEXT	HL
	LD	L,A
	LD	A,47
	CALL	__imul_b
	LD	BC,177
	ADD	HL,BC
	PUSH	HL
	CALL	_gfx_HorizLine_NoClip
	POP	BC
	POP	BC
	POP	BC
;  193			gfx_TransparentSprite_NoClip(recommendationScore, 177 + 47 * i, 133);
	LD	BC,133
	PUSH	BC
	LD	A,(IX+-1)
	UEXT	HL
	LD	L,A
	LD	A,47
	CALL	__imul_b
	LD	BC,177
	ADD	HL,BC
	PUSH	HL
	LD	BC,_recommendationScore_data
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  194			gfx_TransparentSprite_NoClip(plusMinusZero, 184 + 47 * i, 135);//This really should be "printStringCentered" but for some reason this had some issues
	LD	BC,135
	PUSH	BC
	LD	A,(IX+-1)
	UEXT	HL
	LD	L,A
	LD	A,47
	CALL	__imul_b
	LD	BC,184
	ADD	HL,BC
	PUSH	HL
	LD	BC,_plusMinusZero_data
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
	INC	(IX+-1)
;  195		}
L_82:
	LD	A,(IX+-1)
	CP	A,3
	JR	C,L_80
;  196		gfx_SetColor(gold);     gfx_FillRectangle_NoClip(177, 94, 37, 37);
	LD	BC,254
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
	LD	BC,37
	PUSH	BC
	PUSH	BC
	LD	BC,94
	PUSH	BC
	LD	BC,177
	PUSH	BC
	CALL	_gfx_FillRectangle_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  197		gfx_SetColor(silver);   gfx_FillRectangle_NoClip(224, 94, 37, 37);
	LD	BC,253
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
	LD	BC,37
	PUSH	BC
	PUSH	BC
	LD	BC,94
	PUSH	BC
	LD	BC,224
	PUSH	BC
	CALL	_gfx_FillRectangle_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  198		gfx_SetColor(bronze);   gfx_FillRectangle_NoClip(271, 94, 37, 37);
	LD	BC,252
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
	LD	BC,37
	PUSH	BC
	PUSH	BC
	LD	BC,94
	PUSH	BC
	LD	BC,271
	PUSH	BC
	CALL	_gfx_FillRectangle_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  199	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _initGUI ***************************
;Name                         Addr/Register   Size   Type
;_recommendationScore_data           IMPORT    409   variable
;_autonT_data                        IMPORT     44   variable
;_greenAuton_data                    IMPORT    112   variable
;_autonE_data                        IMPORT     44   variable
;_autonA_data                        IMPORT     44   variable
;_genericAuton_data                  IMPORT    112   variable
;_gfx_PrintStringXY                  IMPORT  -----   function
;_genericTeamColor_data              IMPORT    402   variable
;_bottomPanel_data                   IMPORT   1026   variable
;_towerRemove_data                   IMPORT   1371   variable
;_towerAdd_data                      IMPORT   1371   variable
;_stackedCube_data                   IMPORT   1371   variable
;_emptyTower_data                    IMPORT   1371   variable
;_genericCube_data                   IMPORT   1371   variable
;_plusMinusZero_data                 IMPORT    156   variable
;_deltaXText_data                    IMPORT    107   variable
;_gfx_GetStringWidth                 IMPORT  -----   function
;_printStringCentered                IMPORT  -----   function
;_gfx_SetTextFGColor                 IMPORT  -----   function
;_gfx_FillRectangle_NoClip           IMPORT  -----   function
;_shortRedTextBox_data               IMPORT    310   variable
;_redTextBox_data                    IMPORT    497   variable
;_shortPurpleTextBox_data            IMPORT    310   variable
;_shortGreenTextBox_data             IMPORT    310   variable
;_shortOrangeTextBox_data            IMPORT    310   variable
;_purpleTextBoxLong_data             IMPORT   1014   variable
;_greenTextBoxLong_data              IMPORT   1014   variable
;_orangeTextBoxLong_data             IMPORT   1014   variable
;_purpleTextBox_data                 IMPORT    497   variable
;_greenTextBox_data                  IMPORT    497   variable
;_orangeTextBox_data                 IMPORT    497   variable
;_deltaTextBox_data                  IMPORT    338   variable
;_spriteCentered                     IMPORT  -----   function
;_neutralTeamBox_data                IMPORT    542   variable
;_gfx_TransparentSprite_NoClip       IMPORT  -----   function
;_gfx_VertLine_NoClip                IMPORT  -----   function
;_gfx_HorizLine_NoClip               IMPORT  -----   function
;_gfx_Rectangle_NoClip               IMPORT  -----   function
;_gfx_SetColor                       IMPORT  -----   function
;_gfx_FillScreen                     IMPORT  -----   function
;_symbols_gfx_pal                    IMPORT    512   variable
;_gfx_SetPalette                     IMPORT  -----   function
;_gfx_SetTransparentColor            IMPORT  -----   function
;O_3                                   IX-6      2   variable
;O_1                                   IX-4      2   variable
;j                                     IX-2      1   variable
;i                                     IX-1      1   variable


; Stack Frame Size: 15 (bytes)
;       Spill Code: 0 (instruction)


	SEGMENT STRSECT
L__12:
	DB	"SCO"
	DB	0
L__13:
	DB	"SCO"
	DB	0
L__14:
	DB	"Team"
	DB	0
L__15:
	DB	"Team"
	DB	0
L__16:
	DB	"Ally"
	DB	0
L__17:
	DB	"Ally"
	DB	0
L__18:
	DB	"Enemy"
	DB	0
L__19:
	DB	"Enemy"
	DB	0
L__20:
	DB	"000"
	DB	0
L__21:
	DB	"000"
	DB	0
L__24:
	DB	"00"
	DB	0
L__25:
	DB	"00"
	DB	0
L__28:
	DB	"0"
	DB	0
L__29:
	DB	"0"
	DB	0
L__33:
	DB	"Reset"
	DB	0
L__34:
	DB	"Reset"
	DB	0
L__35:
	DB	"Quit"
	DB	0
	SEGMENT CODE
;  200	
;  201	
;  202	void printStringCentered(const char* str, uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t stringWidth, uint16_t stringHeight) {
_printStringCentered:
	LD	HL,-9
	CALL	__frameset
;  203		gfx_PrintStringXY(str, x1 + ((2 + x2 - x1) - stringWidth) / 2, y1 + ((2 + y2 - y1) - stringHeight) / 2);
	LD	BC,(IX+18)
	CALL	__stoiu
	LD	DE,HL
	INC	DE
	INC	DE
	LD	BC,(IX+24)
	CALL	__stoiu
	LD	(IX+-6),HL	; spill
	LD	BC,(IX+12)
	CALL	__stoiu
	LD	BC,(IX+-6)	; unspill
	ADD	HL,BC
	LD	BC,HL
	LD	HL,DE
	OR	A,A
	SBC	HL,BC
	LD	BC,2
	CALL	__idivs
	LD	DE,HL
	LD	BC,(IX+12)
	CALL	__stoiu
	ADD	HL,DE
	PUSH	HL
	LD	BC,(IX+15)
	CALL	__stoiu
	LD	DE,HL
	INC	DE
	INC	DE
	LD	BC,(IX+21)
	CALL	__stoiu
	LD	(IX+-9),HL	; spill
	LD	BC,(IX+9)
	CALL	__stoiu
	LD	BC,(IX+-9)	; unspill
	ADD	HL,BC
	LD	BC,HL
	LD	HL,DE
	OR	A,A
	SBC	HL,BC
	LD	BC,2
	CALL	__idivs
	LD	DE,HL
	LD	BC,(IX+9)
	CALL	__stoiu
	ADD	HL,DE
	PUSH	HL
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  204	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _printStringCentered ***************************
;Name                         Addr/Register   Size   Type
;_gfx_PrintStringXY                  IMPORT  -----   function
;stringHeight                         IX+24      2   parameter
;stringWidth                          IX+21      2   parameter
;y2                                   IX+18      2   parameter
;x2                                   IX+15      2   parameter
;y1                                   IX+12      2   parameter
;x1                                    IX+9      2   parameter
;str                                   IX+6      3   parameter


; Stack Frame Size: 36 (bytes)
;       Spill Code: 0 (instruction)


;  205	
;  206	
;  207	void spriteCentered(gfx_sprite_t* sprite, uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t spriteWidth, uint16_t spriteHeight) {
_spriteCentered:
	LD	HL,-9
	CALL	__frameset
;  208		gfx_TransparentSprite_NoClip(sprite, x1 + ((2 + x2 - x1) - spriteWidth) / 2, y1 + ((2 + y2 - y1) - spriteHeight) / 2);
	LD	BC,(IX+18)
	CALL	__stoiu
	LD	DE,HL
	INC	DE
	INC	DE
	LD	BC,(IX+24)
	CALL	__stoiu
	LD	(IX+-6),HL	; spill
	LD	BC,(IX+12)
	CALL	__stoiu
	LD	BC,(IX+-6)	; unspill
	ADD	HL,BC
	LD	BC,HL
	LD	HL,DE
	OR	A,A
	SBC	HL,BC
	LD	BC,2
	CALL	__idivs
	LD	A,L
	LD	B,(IX+12)
	ADD	A,B
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,(IX+15)
	CALL	__stoiu
	LD	DE,HL
	INC	DE
	INC	DE
	LD	BC,(IX+21)
	CALL	__stoiu
	LD	(IX+-9),HL	; spill
	LD	BC,(IX+9)
	CALL	__stoiu
	LD	BC,(IX+-9)	; unspill
	ADD	HL,BC
	LD	BC,HL
	LD	HL,DE
	OR	A,A
	SBC	HL,BC
	LD	BC,2
	CALL	__idivs
	LD	DE,HL
	LD	BC,(IX+9)
	CALL	__stoiu
	ADD	HL,DE
	PUSH	HL
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  209	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _spriteCentered ***************************
;Name                         Addr/Register   Size   Type
;_gfx_TransparentSprite_NoClip       IMPORT  -----   function
;spriteHeight                         IX+24      2   parameter
;spriteWidth                          IX+21      2   parameter
;y2                                   IX+18      2   parameter
;x2                                   IX+15      2   parameter
;y1                                   IX+12      2   parameter
;x1                                    IX+9      2   parameter
;sprite                                IX+6      3   parameter


; Stack Frame Size: 36 (bytes)
;       Spill Code: 0 (instruction)


;  210	
;  211	
;  212	void debugPrintPalette(void) {
_debugPrintPalette:
	LD	HL,-2
	CALL	__frameset
;  213		uint8_t i;
;  214		uint8_t j;
;  215		for (i = 0; i < 8; i++)
	LD	(IX+-1),0
	JR	L_94
L_92:
;  216			for (j = 0; j < 32; j++)
	LD	(IX+-2),0
	JR	L_91
L_89:
;  217			{
;  218				gfx_SetColor(i * 32 + j);
	LD	B,5
	LD	A,(IX+-1)
	CALL	__bshl
	ADD	A,(IX+-2)
	LD	C,A
	LD	B,0
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  219				gfx_SetPixel(5 + j, 5 + i);
	LD	A,(IX+-1)
	ADD	A,5
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	A,(IX+-2)
	UEXT	HL
	LD	L,A
	LD	IY,HL
	LEA	BC,IY+5
	PUSH	BC
	CALL	_gfx_SetPixel
	POP	BC
	POP	BC
	INC	(IX+-2)
;  220			}
L_91:
	LD	A,(IX+-2)
	CP	A,32
	JR	C,L_89
	INC	(IX+-1)
L_94:
	LD	A,(IX+-1)
	CP	A,8
	JR	C,L_92
;  221	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _debugPrintPalette ***************************
;Name                         Addr/Register   Size   Type
;_gfx_SetPixel                       IMPORT  -----   function
;_gfx_SetColor                       IMPORT  -----   function
;j                                     IX-2      1   variable
;i                                     IX-1      1   variable


; Stack Frame Size: 8 (bytes)
;       Spill Code: 0 (instruction)


;  222	
;  223	void draw(auton *autonWinner, teamColor *col, uint8_t towers[], uint8_t allianceS[], uint8_t enemyS[], uint8_t future[2][3][3], uint8_t allianceScore, uint8_t enemyScore, bool updates[]) {
_draw:
	LD	HL,-133
	CALL	__frameset
;  224		uint8_t i, j, k;
;  225		bool validPrints[2][3][3];
;  226		int8_t futureDeltas[9];
;  227		int8_t diffs[10];
;  228		int8_t sortedDiffs[10];
;  229		uint16_t x;
;  230	
;  231		char buffer[10];
;  232		char emptyBuffer[10];
;  233	
;  234		//kinda lazy on these, whatever
;  235		uint8_t empty3Array[3];
;  236		uint8_t empty233Array[2][3][3];
;  237	
;  238		//Note: These have to be if and not else/if statements in order to function
;  239		if (updates[UPDATE_TEAM_COLORS]){
	LD	HL,(IX+30)
	LD	A,(HL)
	OR	A,A
	JR	Z,L_101
;  240			if (*col == TEAM_COLOR_BLUE)
	LD	HL,(IX+9)
	LD	HL,(HL)
	LD	BC,1
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_97
;  241			{
;  242				gfx_TransparentSprite_NoClip(blueTeamTextBox, 41, 2);
	LD	BC,2
	PUSH	BC
	LD	BC,41
	PUSH	BC
	LD	BC,_blueTeamTextBox_data
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  243				gfx_TransparentSprite_NoClip(redTeamTextBox, 88, 2);
	LD	BC,2
	PUSH	BC
	LD	BC,88
	PUSH	BC
	LD	BC,_redTeamTextBox_data
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  244				gfx_TransparentSprite_NoClip(blueAuton, 170, 4);
	LD	BC,4
	PUSH	BC
	LD	BC,170
	PUSH	BC
	LD	BC,_blueAuton_data
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  245				gfx_TransparentSprite_NoClip(redAuton, 185, 4);
	LD	BC,4
	PUSH	BC
	LD	BC,185
	PUSH	BC
	LD	BC,_redAuton_data
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  246				gfx_SetColor(BLUE);
	LD	BC,251
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  247			}
;  248			else {
	JR	L_98
L_97:
;  249				gfx_TransparentSprite_NoClip(redTeamTextBox, 41, 2);
	LD	BC,2
	PUSH	BC
	LD	BC,41
	PUSH	BC
	LD	BC,_redTeamTextBox_data
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  250				gfx_TransparentSprite_NoClip(blueTeamTextBox, 88, 2);
	LD	BC,2
	PUSH	BC
	LD	BC,88
	PUSH	BC
	LD	BC,_blueTeamTextBox_data
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  251				gfx_TransparentSprite_NoClip(redAuton, 170, 4);
	LD	BC,4
	PUSH	BC
	LD	BC,170
	PUSH	BC
	LD	BC,_redAuton_data
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  252				gfx_TransparentSprite_NoClip(blueAuton, 185, 4);
	LD	BC,4
	PUSH	BC
	LD	BC,185
	PUSH	BC
	LD	BC,_blueAuton_data
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  253				gfx_SetColor(RED);
	LD	BC,250
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  254			}
L_98:
;  255			printStringCentered("Ally", 41, 2, 85, 13, gfx_GetStringWidth("Ally"), FONT_HEIGHT);
	LD	BC,8
	PUSH	BC
	LD	BC,L__45
	PUSH	BC
	CALL	_gfx_GetStringWidth
	POP	BC
	PUSH	HL
	LD	BC,13
	PUSH	BC
	LD	BC,85
	PUSH	BC
	LD	BC,2
	PUSH	BC
	LD	BC,41
	PUSH	BC
	LD	BC,L__46
	PUSH	BC
	CALL	_printStringCentered
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  256			printStringCentered("Enemy", 88, 2, 132, 13, gfx_GetStringWidth("Enemy"), FONT_HEIGHT);
	LD	BC,8
	PUSH	BC
	LD	BC,L__47
	PUSH	BC
	CALL	_gfx_GetStringWidth
	POP	BC
	PUSH	HL
	LD	BC,13
	PUSH	BC
	LD	BC,132
	PUSH	BC
	LD	BC,2
	PUSH	BC
	LD	BC,88
	PUSH	BC
	LD	BC,L__48
	PUSH	BC
	CALL	_printStringCentered
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  257			gfx_FillRectangle_NoClip(15, 230, 34, 4);
	LD	BC,4
	PUSH	BC
	LD	BC,34
	PUSH	BC
	LD	BC,230
	PUSH	BC
	LD	BC,15
	PUSH	BC
	CALL	_gfx_FillRectangle_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  258	
;  259			//TODO: Technically, this is inefficient because this is repeated in update auton, but doesn't work without this
;  260			gfx_TransparentSprite_NoClip(autonA, 172, 6);
	LD	BC,6
	PUSH	BC
	LD	BC,172
	PUSH	BC
	LD	BC,_autonA_data
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  261			gfx_TransparentSprite_NoClip(autonE, 187, 6);
	LD	BC,6
	PUSH	BC
	LD	BC,187
	PUSH	BC
	LD	BC,_autonE_data
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  262		} 
L_101:
;  263		if (updates[UPDATE_RESET_BUTTON]) { //toUpdate, allianceScore, and enemyScore will reset on their own
	LD	HL,(IX+30)
	INC	HL
	LD	A,(HL)
	OR	A,A
	JR	Z,L_213
;  264			*autonWinner = AUTON_TIE;
	LD	HL,(IX+6)
	LD	BC,0
	LD	(HL),BC
;  265			*col = TEAM_COLOR_RED;
	LD	HL,(IX+9)
;  266	
;  267			memcpy(towers, empty3Array, 3 * sizeof(uint8_t));
	LD	BC,3
	PUSH	BC
	PEA	IX+-35
	LD	BC,0
	LD	(HL),BC
	LD	BC,(IX+12)
	PUSH	BC
	CALL	_memcpy
	POP	BC
	POP	BC
	POP	BC
;  268			memcpy(allianceS, empty3Array, 3 * sizeof(uint8_t));
	LD	BC,3
	PUSH	BC
	PEA	IX+-35
	LD	BC,(IX+15)
	PUSH	BC
	CALL	_memcpy
	POP	BC
	POP	BC
	POP	BC
;  269			memcpy(enemyS, empty3Array, 3 * sizeof(uint8_t));
	LD	BC,3
	PUSH	BC
	PEA	IX+-35
	LD	BC,(IX+18)
	PUSH	BC
	CALL	_memcpy
	POP	BC
	POP	BC
	POP	BC
;  270			memcpy(future, empty233Array, 12 * sizeof(uint8_t));
	LD	BC,12
	PUSH	BC
	PEA	IX+-103
	LD	BC,(IX+21)
	PUSH	BC
	CALL	_memcpy
	POP	BC
	POP	BC
	POP	BC
;  271	
;  272			initGUI();
	CALL	_initGUI
;  273		} 
L_213:
;  274		if (updates[UPDATE_CALCULATIONS]) {
	LD	IY,(IX+30)
	LD	A,(IY+2)
	OR	A,A
	JR	Z,L_218
;  275			valid(validPrints, towers, allianceS, enemyS);
	LD	BC,(IX+18)
	PUSH	BC
	LD	BC,(IX+15)
	PUSH	BC
	LD	BC,(IX+12)
	PUSH	BC
	PEA	IX+-85
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-133
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_valid
	PUSH	BC
	LD	BC,-133
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  276			//First 6 normal orange/green/purple boxes
;  277			gfx_TransparentSprite_NoClip(orangeTextBox, 41, 16);
	LD	BC,16
	PUSH	BC
	LD	BC,41
	PUSH	BC
	LD	BC,_orangeTextBox_data
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-133
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_gfx_TransparentSprite_NoClip
	PUSH	BC
	LD	BC,-133
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  278			gfx_TransparentSprite_NoClip(orangeTextBox, 88, 16);
	LD	BC,16
	PUSH	BC
	LD	BC,88
	PUSH	BC
	LD	BC,_orangeTextBox_data
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-133
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_gfx_TransparentSprite_NoClip
	PUSH	BC
	LD	BC,-133
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  279			gfx_TransparentSprite_NoClip(greenTextBox, 41, 29);
	LD	BC,29
	PUSH	BC
	LD	BC,41
	PUSH	BC
	LD	BC,_greenTextBox_data
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-133
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_gfx_TransparentSprite_NoClip
	PUSH	BC
	LD	BC,-133
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  280			gfx_TransparentSprite_NoClip(greenTextBox, 88, 29);
	LD	BC,29
	PUSH	BC
	LD	BC,88
	PUSH	BC
	LD	BC,_greenTextBox_data
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-133
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_gfx_TransparentSprite_NoClip
	PUSH	BC
	LD	BC,-133
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  281			gfx_TransparentSprite_NoClip(purpleTextBox, 41, 42);
	LD	BC,42
	PUSH	BC
	LD	BC,41
	PUSH	BC
	LD	BC,_purpleTextBox_data
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-133
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_gfx_TransparentSprite_NoClip
	PUSH	BC
	LD	BC,-133
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  282			gfx_TransparentSprite_NoClip(purpleTextBox, 88, 42);
	LD	BC,42
	PUSH	BC
	LD	BC,88
	PUSH	BC
	LD	BC,_purpleTextBox_data
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-133
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_gfx_TransparentSprite_NoClip
	PUSH	BC
	LD	BC,-133
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  283	
;  284			//Wide boxes
;  285			gfx_TransparentSprite_NoClip(orangeTextBoxLong, 41, 55);
	LD	BC,55
	PUSH	BC
	LD	BC,41
	PUSH	BC
	LD	BC,_orangeTextBoxLong_data
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-133
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_gfx_TransparentSprite_NoClip
	PUSH	BC
	LD	BC,-133
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  286			gfx_TransparentSprite_NoClip(greenTextBoxLong, 41, 68);
	LD	BC,68
	PUSH	BC
	LD	BC,41
	PUSH	BC
	LD	BC,_greenTextBoxLong_data
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-133
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_gfx_TransparentSprite_NoClip
	PUSH	BC
	LD	BC,-133
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  287			gfx_TransparentSprite_NoClip(purpleTextBoxLong, 41, 81);
	LD	BC,81
	PUSH	BC
	LD	BC,41
	PUSH	BC
	LD	BC,_purpleTextBoxLong_data
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-133
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_gfx_TransparentSprite_NoClip
	PUSH	BC
	LD	BC,-133
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  288	
;  289			//The red text boxes, along with the other 27 orange/green/purple boxes
;  290			for (i = 0; i < 10; i++)
	LD	(IX+-1),0
	JR	L_115
L_113:
;  291				switch (i)
	LD	A,(IX+-1)
	UEXT	HL
	LD	L,A
	CALL	__seqcase
L__51:
	DW	9
	DW	1
	DB	0
	DW24	L_103	

	DW24	L_106	

	DW24	L_109	

	DW24	L_104	

	DW24	L_107	

	DW24	L_110	

	DW24	L_105	

	DW24	L_108	

	DW24	L_111	

	DW24	L_112	

;  292				{
;  293				case 1: case 4: case 7:
L_103:
L_104:
L_105:
;  294					gfx_TransparentSprite_NoClip(orangeTextBox, 41, 94 + i * 13);
	LD	B,13
	LD	C,(IX+-1)
	MLT	BC
	LD	A,C
	ADD	A,94
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,41
	PUSH	BC
	LD	BC,_orangeTextBox_data
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-133
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_gfx_TransparentSprite_NoClip
	PUSH	BC
	LD	BC,-133
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  295					gfx_TransparentSprite_NoClip(orangeTextBox, 88, 94 + i * 13);
	LD	B,13
	LD	C,(IX+-1)
	MLT	BC
	LD	A,C
	ADD	A,94
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,88
	PUSH	BC
	LD	BC,_orangeTextBox_data
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-133
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_gfx_TransparentSprite_NoClip
	PUSH	BC
	LD	BC,-133
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  296					gfx_TransparentSprite_NoClip(shortOrangeTextBox, 135, 94 + i * 13);
	LD	B,13
	LD	C,(IX+-1)
	MLT	BC
	LD	A,C
	ADD	A,94
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,135
	PUSH	BC
	LD	BC,_shortOrangeTextBox_data
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-133
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_gfx_TransparentSprite_NoClip
	PUSH	BC
	LD	BC,-133
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  297					break;
	JR	L_114
;  298				case 2: case 5: case 8:
L_106:
L_107:
L_108:
;  299					gfx_TransparentSprite_NoClip(greenTextBox, 41, 94 + i * 13);
	LD	B,13
	LD	C,(IX+-1)
	MLT	BC
	LD	A,C
	ADD	A,94
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,41
	PUSH	BC
	LD	BC,_greenTextBox_data
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-133
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_gfx_TransparentSprite_NoClip
	PUSH	BC
	LD	BC,-133
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  300					gfx_TransparentSprite_NoClip(greenTextBox, 88, 94 + i * 13);
	LD	B,13
	LD	C,(IX+-1)
	MLT	BC
	LD	A,C
	ADD	A,94
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,88
	PUSH	BC
	LD	BC,_greenTextBox_data
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-133
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_gfx_TransparentSprite_NoClip
	PUSH	BC
	LD	BC,-133
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  301					gfx_TransparentSprite_NoClip(shortGreenTextBox, 135, 94 + i * 13);
	LD	B,13
	LD	C,(IX+-1)
	MLT	BC
	LD	A,C
	ADD	A,94
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,135
	PUSH	BC
	LD	BC,_shortGreenTextBox_data
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-133
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_gfx_TransparentSprite_NoClip
	PUSH	BC
	LD	BC,-133
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  302					break;
	JR	L_114
;  303				case 3: case 6: case 9:
L_109:
L_110:
L_111:
;  304					gfx_TransparentSprite_NoClip(purpleTextBox, 41, 94 + i * 13);
	LD	B,13
	LD	C,(IX+-1)
	MLT	BC
	LD	A,C
	ADD	A,94
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,41
	PUSH	BC
	LD	BC,_purpleTextBox_data
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-133
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_gfx_TransparentSprite_NoClip
	PUSH	BC
	LD	BC,-133
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  305					gfx_TransparentSprite_NoClip(purpleTextBox, 88, 94 + i * 13);
	LD	B,13
	LD	C,(IX+-1)
	MLT	BC
	LD	A,C
	ADD	A,94
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,88
	PUSH	BC
	LD	BC,_purpleTextBox_data
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-133
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_gfx_TransparentSprite_NoClip
	PUSH	BC
	LD	BC,-133
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  306					gfx_TransparentSprite_NoClip(shortPurpleTextBox, 135, 94 + i * 13);
	LD	B,13
	LD	C,(IX+-1)
	MLT	BC
	LD	A,C
	ADD	A,94
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,135
	PUSH	BC
	LD	BC,_shortPurpleTextBox_data
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-133
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_gfx_TransparentSprite_NoClip
	PUSH	BC
	LD	BC,-133
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  307					break;
	JR	L_114
;  308				default:
L_112:
;  309					gfx_TransparentSprite_NoClip(redTextBox, 41, 94);
	LD	BC,94
	PUSH	BC
	LD	BC,41
	PUSH	BC
	LD	BC,_redTextBox_data
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-133
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_gfx_TransparentSprite_NoClip
	PUSH	BC
	LD	BC,-133
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  310					gfx_TransparentSprite_NoClip(redTextBox, 88, 94);
	LD	BC,94
	PUSH	BC
	LD	BC,88
	PUSH	BC
	LD	BC,_redTextBox_data
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-133
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_gfx_TransparentSprite_NoClip
	PUSH	BC
	LD	BC,-133
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  311					gfx_TransparentSprite_NoClip(shortRedTextBox, 135, 94);
	LD	BC,94
	PUSH	BC
	LD	BC,135
	PUSH	BC
	LD	BC,_shortRedTextBox_data
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-133
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_gfx_TransparentSprite_NoClip
	PUSH	BC
	LD	BC,-133
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  312					break;
;  313				}
L_114:
	INC	(IX+-1)
L_115:
	LD	A,(IX+-1)
	CP	A,10
	JR	C,L_113
;  314				for (i = 0; i < 3; i++)
	LD	(IX+-1),0
	JR	L_119
L_117:
;  315					gfx_TransparentSprite_NoClip(recommendationScore, 177 + 47 * i, 133);
	LD	BC,133
	PUSH	BC
	LD	A,(IX+-1)
	UEXT	HL
	LD	L,A
	LD	A,47
	CALL	__imul_b
	LD	BC,177
	ADD	HL,BC
	PUSH	HL
	LD	BC,_recommendationScore_data
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-133
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_gfx_TransparentSprite_NoClip
	PUSH	BC
	LD	BC,-133
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	INC	(IX+-1)
L_119:
	LD	A,(IX+-1)
	CP	A,3
	JR	C,L_117
;  316		
;  317				//Top 6 button texts
;  318				for (i = 0; i < 3; i++) {
	LD	(IX+-1),0
	JR	L_124
L_122:
;  319					sprintf(buffer, "%u", allianceS[i]);
	LD	A,(IX+-1)
	UEXT	HL
	LD	L,A
	LD	BC,(IX+15)
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	PUSH	HL
	LD	BC,L__54
	PUSH	BC
	PEA	IX+-11
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
;  320					printStringCentered(buffer, 41, 16 + 13 * i, 85, 26 + 13 * i, gfx_GetStringWidth(buffer), FONT_HEIGHT); 
	LD	C,(IX+-1)
	LD	DE,8
	PUSH	DE
	PEA	IX+-11
	LD	B,0
	LD	HL,BC
	LD.LIS	BC,13
	CALL	__smulu
	LD	BC,HL
	PUSH	IY
	LEA	IY,IX+-128
	LD	(IY+-5),BC
	POP	IY
	CALL	_gfx_GetStringWidth
	PUSH	IY
	LEA	IY,IX+-128
	LD	BC,(IY+-5)
	POP	IY
	POP	DE
	PUSH	HL
	LD	IY,BC
	LEA	DE,IY+26
	PUSH	DE
	LD	IY,BC
	LD	BC,85
	PUSH	BC
	LEA	BC,IY+16
	PUSH	BC
	LD	BC,41
	PUSH	BC
	PEA	IX+-11
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-133
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_printStringCentered
	PUSH	BC
	LD	BC,-133
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  321					memcpy(buffer, emptyBuffer, 10*sizeof(uint8_t));
	LD	BC,10
	PUSH	BC
	PEA	IX+-57
	PEA	IX+-11
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-133
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_memcpy
	PUSH	BC
	LD	BC,-133
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	INC	(IX+-1)
;  322				}
L_124:
	LD	A,(IX+-1)
	CP	A,3
	JR	C,L_122
;  323	
;  324				for (i = 0; i < 3; i++) {
	LD	(IX+-1),0
	JR	L_129
L_127:
;  325					sprintf(buffer, "%u", enemyS[i]);
	LD	A,(IX+-1)
	UEXT	HL
	LD	L,A
	LD	BC,(IX+18)
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	PUSH	HL
	LD	BC,L__56
	PUSH	BC
	PEA	IX+-11
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
;  326					printStringCentered(buffer, 88, 16 + 13 * i, 132, 26 + 13 * i, gfx_GetStringWidth(buffer), FONT_HEIGHT); 
	LD	C,(IX+-1)
	LD	DE,8
	PUSH	DE
	PEA	IX+-11
	LD	B,0
	LD	HL,BC
	LD.LIS	BC,13
	CALL	__smulu
	LD	BC,HL
	PUSH	IY
	LEA	IY,IX+-128
	LD	(IY+-5),BC
	POP	IY
	CALL	_gfx_GetStringWidth
	PUSH	IY
	LEA	IY,IX+-128
	LD	BC,(IY+-5)
	POP	IY
	POP	DE
	PUSH	HL
	LD	IY,BC
	LEA	DE,IY+26
	PUSH	DE
	LD	IY,BC
	LD	BC,132
	PUSH	BC
	LEA	BC,IY+16
	PUSH	BC
	LD	BC,88
	PUSH	BC
	PEA	IX+-11
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-133
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_printStringCentered
	PUSH	BC
	LD	BC,-133
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  327					memcpy(buffer, emptyBuffer, 10*sizeof(uint8_t));
	LD	BC,10
	PUSH	BC
	PEA	IX+-57
	PEA	IX+-11
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-133
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_memcpy
	PUSH	BC
	LD	BC,-133
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	INC	(IX+-1)
;  328				}
L_129:
	LD	A,(IX+-1)
	CP	A,3
	JR	C,L_127
;  329	
;  330				//Wide button texts
;  331				for (i = 0; i < 3; i++) {
	LD	(IX+-1),0
	JR	L_134
L_132:
;  332					sprintf(buffer, "%u", towers[i]);
	LD	A,(IX+-1)
	UEXT	HL
	LD	L,A
	LD	BC,(IX+12)
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	PUSH	HL
	LD	BC,L__58
	PUSH	BC
	PEA	IX+-11
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
;  333					printStringCentered(buffer, 41, 55 + 13 * i, 132, 65 + 13 * i, gfx_GetStringWidth(buffer), FONT_HEIGHT); 
	LD	C,(IX+-1)
	LD	DE,8
	PUSH	DE
	PEA	IX+-11
	LD	B,0
	LD	HL,BC
	LD.LIS	BC,13
	CALL	__smulu
	LD	BC,HL
	PUSH	IY
	LEA	IY,IX+-128
	LD	(IY+-5),BC
	POP	IY
	CALL	_gfx_GetStringWidth
	PUSH	IY
	LEA	IY,IX+-128
	LD	BC,(IY+-5)
	POP	IY
	POP	DE
	PUSH	HL
	LD	IY,BC
	LEA	DE,IY+65
	PUSH	DE
	LD	IY,BC
	LD	BC,132
	PUSH	BC
	LEA	BC,IY+55
	PUSH	BC
	LD	BC,41
	PUSH	BC
	PEA	IX+-11
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-133
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_printStringCentered
	PUSH	BC
	LD	BC,-133
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  334					memcpy(buffer, emptyBuffer, 10*sizeof(uint8_t));
	LD	BC,10
	PUSH	BC
	PEA	IX+-57
	PEA	IX+-11
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-133
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_memcpy
	PUSH	BC
	LD	BC,-133
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	INC	(IX+-1)
;  335				}
L_134:
	LD	A,(IX+-1)
	CP	A,3
	JR	C,L_132
;  336	
;  337				//Current Score texts
;  338				sprintf(buffer, "%u", allianceScore);
	LD	A,(IX+24)
	UEXT	HL
	LD	L,A
	PUSH	HL
	LD	BC,L__60
	PUSH	BC
	PEA	IX+-11
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-133
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_sprintf
	PUSH	BC
	LD	BC,-133
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  339				printStringCentered(buffer, 41, 94, 41 + redTextBox_width, 94 + redTextBox_height, gfx_GetStringWidth(buffer), FONT_HEIGHT); 
	LD	BC,8
	PUSH	BC
	PEA	IX+-11
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-133
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_gfx_GetStringWidth
	PUSH	BC
	LD	BC,-133
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	PUSH	HL
	LD	BC,105
	PUSH	BC
	LD	BC,86
	PUSH	BC
	LD	BC,94
	PUSH	BC
	LD	BC,41
	PUSH	BC
	PEA	IX+-11
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-133
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_printStringCentered
	PUSH	BC
	LD	BC,-133
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  340				memcpy(buffer, emptyBuffer, 10*sizeof(uint8_t));
	LD	BC,10
	PUSH	BC
	PEA	IX+-57
	PEA	IX+-11
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-133
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_memcpy
	PUSH	BC
	LD	BC,-133
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  341				sprintf(buffer, "%u", enemyScore);
	LD	A,(IX+27)
	UEXT	HL
	LD	L,A
	PUSH	HL
	LD	BC,L__61
	PUSH	BC
	PEA	IX+-11
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-133
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_sprintf
	PUSH	BC
	LD	BC,-133
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  342				printStringCentered(buffer, 88, 94, 88 + redTextBox_width, 94 + redTextBox_height, gfx_GetStringWidth(buffer), FONT_HEIGHT); 
	LD	BC,8
	PUSH	BC
	PEA	IX+-11
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-133
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_gfx_GetStringWidth
	PUSH	BC
	LD	BC,-133
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	PUSH	HL
	LD	BC,105
	PUSH	BC
	LD	BC,133
	PUSH	BC
	LD	BC,94
	PUSH	BC
	LD	BC,88
	PUSH	BC
	PEA	IX+-11
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-133
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_printStringCentered
	PUSH	BC
	LD	BC,-133
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  343				memcpy(buffer, emptyBuffer, 10*sizeof(uint8_t));
	LD	BC,10
	PUSH	BC
	PEA	IX+-57
	PEA	IX+-11
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-133
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_memcpy
	PUSH	BC
	LD	BC,-133
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  344	
;  345				gfx_SetColor(gold);     gfx_FillRectangle_NoClip(177, 94, 37, 37);
	LD	BC,254
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-133
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_gfx_SetColor
	PUSH	BC
	LD	BC,-133
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	LD	BC,37
	PUSH	BC
	PUSH	BC
	LD	BC,94
	PUSH	BC
	LD	BC,177
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-133
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_gfx_FillRectangle_NoClip
	PUSH	BC
	LD	BC,-133
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  346				gfx_SetColor(silver);   gfx_FillRectangle_NoClip(224, 94, 37, 37);
	LD	BC,253
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-133
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_gfx_SetColor
	PUSH	BC
	LD	BC,-133
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	LD	BC,37
	PUSH	BC
	PUSH	BC
	LD	BC,94
	PUSH	BC
	LD	BC,224
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-133
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_gfx_FillRectangle_NoClip
	PUSH	BC
	LD	BC,-133
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  347				gfx_SetColor(bronze);   gfx_FillRectangle_NoClip(271, 94, 37, 37);
	LD	BC,252
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-133
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_gfx_SetColor
	PUSH	BC
	LD	BC,-133
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	LD	BC,37
	PUSH	BC
	PUSH	BC
	LD	BC,94
	PUSH	BC
	LD	BC,271
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-133
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_gfx_FillRectangle_NoClip
	PUSH	BC
	LD	BC,-133
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  348	
;  349			for (i = 0; i < 2; i++) //team
	LD	(IX+-1),0
	JR	L_156
L_154:
;  350				for (j = 0; j < 3; j++) //color
	LD	(IX+-12),0
	JR	L_153
L_151:
;  351					for(k = 0; k < 3; k++) { //action
	LD	(IX+-13),0
	JR	L_150
L_148:
;  352					sprintf(buffer, "%u", future[i][j][k]);
	LD	A,(IX+-1)
	UEXT	HL
	LD	L,A
	LD	A,9
	CALL	__imul_b
	LD	(IX+-22),HL
	LD	A,(IX+-12)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	(IX+-47),HL
	LD	BC,(IX+-22)
	LD	HL,(IX+21)
	ADD	HL,BC
	LD	BC,(IX+-47)
	ADD	HL,BC
	LD	BC,HL
	LD	A,(IX+-13)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	PUSH	HL
	LD	BC,L__62
	PUSH	BC
	PEA	IX+-11
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
;  353					printStringCentered(validPrints[i][j][k] ? buffer : "---", 41+47*i, 107 + 13*(k*3 + j), 41 + 47*i + redTextBox_width, 107 + 13*(k*3 + j) + redTextBox_height, validPrints[i][j][k] ? gfx_GetStringWidth(buffer) : gfx_GetStringWidth("---"), FONT_HEIGHT);
	LD	BC,(IX+-22)
	LEA	HL,IX+-85
	ADD	HL,BC
	LD	BC,(IX+-47)
	ADD	HL,BC
	LD	BC,HL
	LD	A,(IX+-13)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	A,(HL)
	OR	A,A
	JR	NZ,L__64
	LD	A,1
	JR	L__65
L__64:
	XOR	A,A
L__65:
	LD	(IX+-19),A
	OR	A,A
	JR	NZ,L_142
	LEA	BC,IX+-11
	LD	(IX+-38),BC
	JR	L_143
L_142:
	LD	BC,L__67
	LD	(IX+-38),BC
L_143:
	LD	A,(IX+-19)
	OR	A,A
	JR	NZ,L_146
	PEA	IX+-11
	CALL	_gfx_GetStringWidth
	POP	BC
	LD	(IX+-41),HL
	JR	L_147
L_146:
	LD	BC,L__69
	PUSH	BC
	CALL	_gfx_GetStringWidth
	POP	BC
	LD	(IX+-41),HL
L_147:
	LD	C,(IX+-13)
	LD	B,0
	LD.LIS	HL,3
	CALL	__smulu
	LD	C,(IX+-12)
	LD	B,0
	LD	DE,HL
	LD	HL,BC
	ADD.SIS	HL,DE
	LD.LIS	BC,13
	CALL	__smulu
	LD	C,(IX+-1)
	LD	B,0
	LD	DE,HL
	LD	HL,BC
	LD.LIS	BC,47
	LD	IY,DE
	LD	(IX+-112),HL	; spill
	LEA	HL,IY+118
	LD	(IX+-115),HL	; spill
	LD	HL,(IX+-112)	; unspill
	CALL	__smulu
	LD	BC,8
	PUSH	BC
	LD	IY,HL
	LEA	BC,IY+86
	LD	(IX+-112),HL	; spill
	LD	HL,(IX+-41)
	LD	(IX+-118),HL	; spill
	LD	HL,(IX+-112)	; unspill
	LD	(IX+-112),HL	; spill
	LD	HL,(IX+-118)	; unspill
	PUSH	HL
	LD	HL,(IX+-112)	; unspill
	LD	(IX+-112),HL	; spill
	LD	HL,(IX+-115)	; unspill
	PUSH	HL
	PUSH	BC
	LD	IY,DE
	LEA	BC,IY+107
	PUSH	BC
	LD	IY,(IX+-112)
	LEA	BC,IY+41
	PUSH	BC
	LD	BC,(IX+-38)
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-133
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_printStringCentered
	PUSH	BC
	LD	BC,-133
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  354					memcpy(buffer, emptyBuffer, 10*sizeof(uint8_t));
	LD	BC,10
	PUSH	BC
	PEA	IX+-57
	PEA	IX+-11
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-133
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_memcpy
	PUSH	BC
	LD	BC,-133
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	INC	(IX+-13)
;  355					}
L_150:
	LD	A,(IX+-13)
	CP	A,3
	JR	C,L_148
	INC	(IX+-12)
L_153:
	LD	A,(IX+-12)
	CP	A,3
	JR	C,L_151
	INC	(IX+-1)
L_156:
	LD	A,(IX+-1)
	CP	A,2
	JR	C,L_154
;  356	
;  357			diffs[0] = ((int8_t)allianceScore)-((int8_t)enemyScore);
	LD	A,(IX+24)
	SUB	A,(IX+27)
	LD	(IX+-32),A
;  358			for (j = 0; j < 3; j++) //color
	LD	(IX+-12),0
	JR	L_165
L_163:
;  359				for(k = 0; k < 3; k++) //action
	LD	(IX+-13),0
	JR	L_162
L_160:
;  360					diffs[1+k+j*3] = ((int8_t)future[TEAM_ALLIANCE-1][k][j]) - ((int8_t)future[TEAM_ENEMY-1][k][j]) - diffs[0]; //what?
	LD	A,(IX+-13)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,HL
	LD	HL,(IX+21)
	LD	DE,BC
	ADD	HL,DE
	LD	DE,HL
	LD	A,(IX+-12)
	UEXT	HL
	LD	L,A
	ADD	HL,DE
	LD	(IX+-121),HL	; spill
	LD	A,(IX+-12)
	LD	IY,(IX+21)
	LEA	HL,IY+9
	ADD	HL,BC
	LD	BC,HL
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	A,(HL)
	ADD	A,(IX+-32)
	LD	D,A
	LD	A,(IX+-12)
	UEXT	HL
	LD	L,A
	LD	A,(IX+-13)
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	(IX+-124),HL
	UEXT	HL
	LD	L,A
	LD	(IX+-112),HL	; spill
	LD	HL,(IX+-121)	; unspill
	LD	A,(HL)
	LD	HL,(IX+-112)	; unspill
	LD	BC,HL
	INC	BC
	LD	HL,(IX+-124)
	ADD	HL,BC
	LD	BC,HL
	LEA	HL,IX+-32
	ADD	HL,BC
	SUB	A,D
	LD	(HL),A
	INC	(IX+-13)
L_162:
	LD	A,(IX+-13)
	CP	A,3
	JR	C,L_160
	INC	(IX+-12)
L_165:
	LD	A,(IX+-12)
	CP	A,3
	JR	C,L_163
;  361	
;  362			
;  363	
;  364	
;  365	
;  366	
;  367	
;  368	
;  369			for (i = 0; i < 10; i++) {
	LD	(IX+-1),0
	JR	L_177
L_175:
;  370				if(i == 0 || validPrints[0][(i-1)%3][(i-1)/3]) {
	LD	A,(IX+-1)
	OR	A,A
	JR	Z,L_172
	LD	A,(IX+-1)
	UEXT	HL
	LD	L,A
	DEC	HL
	LD	DE,HL
	LD	HL,DE
	LD	BC,3
	CALL	__irems
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,HL
	LEA	HL,IX+-85
	ADD	HL,BC
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-2),HL
	POP	IY
	LD	HL,DE
	LD	BC,3
	CALL	__idivs
	PUSH	IY
	LEA	IY,IX+-128	; unspill
	LD	BC,(IY+-2)
	POP	IY
	ADD	HL,BC
	LD	A,(HL)
	OR	A,A
	JR	Z,L_173
L_172:
;  371					if (diffs[i] > 0)
	LD	A,(IX+-1)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LEA	HL,IX+-32
	ADD	HL,BC
	LD	(IX+-18),HL
	LD	A,(HL)
	LD	B,A
	SEXT	HL
	LD	L,B
	LD	BC,HL
	OR	A,A
	SBC	HL,HL
	OR	A,A
	SBC	HL,BC
	JP	P,L_171
;  372					{
;  373						sprintf(buffer, "%c%i", '+', abs(diffs[i]));
	LD	HL,(IX+-18)
	LD	A,(HL)
	LD	B,A
	SEXT	HL
	LD	L,B
	PUSH	HL
	CALL	_abs
	POP	BC
	PUSH	HL
	LD	BC,43
	PUSH	BC
	LD	BC,L__78
	PUSH	BC
	PEA	IX+-11
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  374					} else if (diffs[i] < 0) {
	JR	L_174
L_171:
	LD	HL,(IX+-18)
	LD	A,(HL)
	LD	B,A
	SEXT	HL
	LD	L,B
	CALL	__icmpzero
	CALL	__setflag
	JP	P,L_169
;  375						sprintf(buffer, "%c%i", '-', abs(diffs[i]));
	LD	HL,(IX+-18)
	LD	A,(HL)
	LD	B,A
	SEXT	HL
	LD	L,B
	PUSH	HL
	CALL	_abs
	POP	BC
	PUSH	HL
	LD	BC,45
	PUSH	BC
	LD	BC,L__80
	PUSH	BC
	PEA	IX+-11
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  376					} else {
	JR	L_174
L_169:
;  377						sprintf(buffer, "%c", '0');
	LD	BC,48
	PUSH	BC
	LD	BC,L__81
	PUSH	BC
	PEA	IX+-11
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
;  378					}
;  379					
;  380				} else {
	JR	L_174
L_173:
;  381					sprintf(buffer, "%s", "--");
	LD	BC,L__82
	PUSH	BC
	LD	BC,L__83
	PUSH	BC
	PEA	IX+-11
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
;  382				}
L_174:
;  383				printStringCentered(buffer, 135+(diffs[i]==0), 96+13*i, 162+(diffs[i]==0), 102+13*i, gfx_GetStringWidth(buffer), FONT_HEIGHT); //manual adjustment for 0
	LD	C,(IX+-1)
	LD	B,0
	LD	HL,BC
	LD.LIS	BC,13
	CALL	__smulu
	LD	(IX+-109),HL
	LD	A,(IX+-1)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LEA	HL,IX+-32
	ADD	HL,BC
	LD	(IX+-106),HL
	LD	A,(HL)
	OR	A,A
	JR	NZ,L__85
	LD	A,1
	JR	L__86
L__85:
	XOR	A,A
L__86:
	LD	BC,8
	PUSH	BC
	PEA	IX+-11
	PUSH	IY
	LEA	IY,IX+-128
	LD	(IY+-3),A
	POP	IY
	CALL	_gfx_GetStringWidth
	PUSH	IY
	LEA	IY,IX+-128
	LD	A,(IY+-3)
	POP	IY
	POP	BC
	PUSH	HL
	LD	C,A
	LD	B,0
	LD	HL,BC
	LD	IY,(IX+-109)
	LEA	BC,IY+102
	PUSH	BC
	LD	C,A
	LD.LIS	DE,162
	ADD.SIS	HL,DE
	PUSH	HL
	LD	B,0
	LEA	DE,IY+96
	PUSH	DE
	LD	HL,BC
	LD.LIS	DE,135
	ADD.SIS	HL,DE
	PUSH	HL
	PEA	IX+-11
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-133
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_printStringCentered
	PUSH	BC
	LD	BC,-133
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  384				memcpy(buffer, emptyBuffer, 10*sizeof(uint8_t));
	LD	BC,10
	PUSH	BC
	PEA	IX+-57
	PEA	IX+-11
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-133
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_memcpy
	PUSH	BC
	LD	BC,-133
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	INC	(IX+-1)
;  385			} 
L_177:
	LD	A,(IX+-1)
	CP	A,10
	JR	C,L_175
;  386	
;  387	
;  388	
;  389	
;  390	
;  391			for (i = 0; i < 9; i++)
	LD	(IX+-1),0
	JR	L_186
L_184:
;  392			{
;  393				diffs[i+1] = validPrints[0][i%3][i/3]  ? diffs[i+1] : -127;
	LD	A,(IX+-1)
	UEXT	HL
	LD	L,A
	LD	BC,3
	CALL	__irems
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,HL
	LEA	HL,IX+-85
	ADD	HL,BC
	LD	DE,HL
	LD	A,(IX+-1)
	UEXT	HL
	LD	L,A
	LD	BC,3
	CALL	__idivs
	ADD	HL,DE
	LD	A,(HL)
	OR	A,A
	JR	Z,L_182
	LD	A,(IX+-1)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	INC	BC
	LEA	HL,IX+-32
	ADD	HL,BC
	LD	A,(HL)
	LD	B,A
	SEXT	HL
	LD	L,B
	LD	(IX+-44),HL
	JR	L_183
L_182:
	LD	BC,16777089
	LD	(IX+-44),BC
L_183:
	LD	D,(IX+-44)
	LD	A,(IX+-1)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LEA	HL,IX+-32
	INC	BC
	ADD	HL,BC
	LD	(HL),D
	INC	(IX+-1)
;  394			}
L_186:
	LD	A,(IX+-1)
	CP	A,9
	JR	C,L_184
;  395	
;  396			diffs[0] = -127;
	LD	(IX+-32),129
;  397	
;  398			memcpy(sortedDiffs, diffs, 10*sizeof(int8_t));
	LD	BC,10
	PUSH	BC
	PEA	IX+-32
	PEA	IX+-67
	CALL	_memcpy
	POP	BC
	POP	BC
	POP	BC
;  399	
;  400			selectionSort(sortedDiffs, 10);
	LD	BC,10
	PUSH	BC
	PEA	IX+-67
	CALL	_selectionSort
	POP	BC
	POP	BC
;  401	
;  402			for (i = 0; i < 3; i++)
	LD	(IX+-1),0
	JR	L_211
L_209:
;  403			{
;  404				j = sortedDiffs[9-i];
	LD	A,(IX+-1)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	HL,9
	OR	A,A
	SBC	HL,BC
	LD	BC,HL
	LEA	HL,IX+-67
	ADD	HL,BC
	LD	A,(HL)
	LD	(IX+-12),A
;  405				x = 47*i;
	LD	C,(IX+-1)
	LD	B,0
	LD	HL,BC
	LD.LIS	BC,47
	CALL	__smulu
	LD	(IX+-15),L
	LD	(IX+-14),H
;  406	
;  407	
;  408				if (j > 0)
	XOR	A,A
	CP	A,(IX+-12)
	JR	NC,L_195
;  409					{
;  410						sprintf(buffer, "%c%i", '+', abs(j));
	LD	A,(IX+-12)
	UEXT	HL
	LD	L,A
	PUSH	HL
	CALL	_abs
	POP	BC
	PUSH	HL
	LD	BC,43
	PUSH	BC
	LD	BC,L__91
	PUSH	BC
	PEA	IX+-11
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  411					} else if (j == 0) {
	JR	L_196
L_195:
	LD	A,(IX+-12)
	OR	A,A
	JR	NZ,L_193
;  412						sprintf(buffer, "%c", '0');
	LD	BC,48
	PUSH	BC
	LD	BC,L__93
	PUSH	BC
	PEA	IX+-11
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
;  413					} else {
	JR	L_196
L_193:
;  414						if(j == -127) {
	LD	A,(IX+-12)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,16777089
	SBC	HL,BC
	JR	NZ,L_191
;  415							sprintf(buffer, "%s", "---");
	LD	BC,L__95
	PUSH	BC
	LD	BC,L__96
	PUSH	BC
	PEA	IX+-11
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
;  416						} else
	JR	L_196
L_191:
;  417						{
;  418						sprintf(buffer, "%c%i", '-', abs(j));
	LD	A,(IX+-12)
	UEXT	HL
	LD	L,A
	PUSH	HL
	CALL	_abs
	POP	BC
	PUSH	HL
	LD	BC,45
	PUSH	BC
	LD	BC,L__97
	PUSH	BC
	PEA	IX+-11
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  419						}
;  420					}
L_196:
;  421				printStringCentered(buffer, 177+x, 135, 213+x, 141, gfx_GetStringWidth(buffer), FONT_HEIGHT);
	LD	BC,8
	PUSH	BC
	PEA	IX+-11
	CALL	_gfx_GetStringWidth
	POP	BC
	PUSH	HL
	LD	BC,141
	PUSH	BC
	LD	HL,(IX+-15)
	LD.LIS	DE,213
	ADD.SIS	HL,DE
	PUSH	HL
	LD	BC,135
	PUSH	BC
	LD	HL,(IX+-15)
	LD.LIS	DE,177
	ADD.SIS	HL,DE
	PUSH	HL
	PEA	IX+-11
	CALL	_printStringCentered
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  422				memcpy(buffer, emptyBuffer, 10*sizeof(uint8_t)); 
	LD	BC,10
	PUSH	BC
	PEA	IX+-57
	PEA	IX+-11
	CALL	_memcpy
	POP	BC
	POP	BC
	POP	BC
;  423				
;  424	
;  425	/*
;  426			for (i = 0; i < 3; i++)
;  427			{
;  428				for (j = 0; j < 3; j++)
;  429				{
;  430					sprintf(buffer, "%i%c", diffs[i+j*3+1], ' ');
;  431				}
;  432				gfx_PrintStringXY(buffer, 220, 50*10+i);
;  433				memcpy(buffer, emptyBuffer, sizeof(int8_t));
;  434	
;  435	
;  436				for (j = 0; j < 3; j++) {
;  437					sprintf(buffer, "%i%c", sortedDiffs[i+j*3+1], ' ');
;  438				}
;  439					gfx_PrintStringXY(buffer, 220, 150+10*i);
;  440					memcpy(buffer, emptyBuffer, sizeof(int8_t));
;  441	
;  442	
;  443			}
;  444			
;  445	*/
;  446	
;  447	
;  448	
;  449	
;  450	
;  451	
;  452	
;  453				if(j != -127) {
	LD	A,(IX+-12)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,16777089
	SBC	HL,BC
	JR	Z,L_210
;  454					k = indexOf(diffs, j, 10);
	LD	BC,10
	PUSH	BC
	LD	C,(IX+-12)
	LD	B,0
	PUSH	BC
	PEA	IX+-32
	CALL	_indexOf
	POP	BC
	POP	BC
	POP	BC
	LD	(IX+-13),A
;  455					switch (k)
	UEXT	HL
	LD	L,A
	CALL	__case24
L__99:
	DW	10
	DW	1
	DB	0
	DW24	L_197	

	DW	2
	DB	0
	DW24	L_198	

	DW	3
	DB	0
	DW24	L_199	

	DW	4
	DB	0
	DW24	L_200	

	DW	5
	DB	0
	DW24	L_201	

	DW	6
	DB	0
	DW24	L_202	

	DW	7
	DB	0
	DW24	L_203	

	DW	8
	DB	0
	DW24	L_204	

	DW	9
	DB	0
	DW24	L_205	

	DW	65535
	DB	255
	DW24	L_206	

	DW24	L_207	

;  456					{
;  457					case 1:
L_197:
;  458						gfx_TransparentSprite_NoClip(orangeCube, 177+x, 94);
	LD	BC,94
	PUSH	BC
	LD	BC,(IX+-15)
	CALL	__stoiu
	LD	BC,177
	ADD	HL,BC
	PUSH	HL
	LD	BC,_orangeCube_data
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  459						break;
	JR	L_210
;  460					case 2:
L_198:
;  461						gfx_TransparentSprite_NoClip(greenCube, 177+x, 94);
	LD	BC,94
	PUSH	BC
	LD	BC,(IX+-15)
	CALL	__stoiu
	LD	BC,177
	ADD	HL,BC
	PUSH	HL
	LD	BC,_greenCube_data
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  462						break;
	JR	L_210
;  463					case 3:
L_199:
;  464						gfx_TransparentSprite_NoClip(purpleCube, 177+x, 94);
	LD	BC,94
	PUSH	BC
	LD	BC,(IX+-15)
	CALL	__stoiu
	LD	BC,177
	ADD	HL,BC
	PUSH	HL
	LD	BC,_purpleCube_data
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  465						break;
	JR	L_210
;  466					case 4:
L_200:
;  467						gfx_TransparentSprite_NoClip(towerAdd, 177+x, 94);
	LD	BC,94
	PUSH	BC
	LD	BC,(IX+-15)
	CALL	__stoiu
	LD	BC,177
	ADD	HL,BC
	PUSH	HL
	LD	BC,_towerAdd_data
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  468						gfx_TransparentSprite_NoClip(towerOrange, 177+x, 94);
	LD	BC,94
	PUSH	BC
	LD	BC,(IX+-15)
	CALL	__stoiu
	LD	BC,177
	ADD	HL,BC
	PUSH	HL
	LD	BC,_towerOrange_data
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  469						break;
	JR	L_210
;  470					case 5:
L_201:
;  471						gfx_TransparentSprite_NoClip(towerAdd, 177+x, 94);
	LD	BC,94
	PUSH	BC
	LD	BC,(IX+-15)
	CALL	__stoiu
	LD	BC,177
	ADD	HL,BC
	PUSH	HL
	LD	BC,_towerAdd_data
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  472						gfx_TransparentSprite_NoClip(towerGreen, 177+x, 94);
	LD	BC,94
	PUSH	BC
	LD	BC,(IX+-15)
	CALL	__stoiu
	LD	BC,177
	ADD	HL,BC
	PUSH	HL
	LD	BC,_towerGreen_data
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  473						break;
	JR	L_210
;  474					case 6:
L_202:
;  475						gfx_TransparentSprite_NoClip(towerAdd, 177+x, 94);
	LD	BC,94
	PUSH	BC
	LD	BC,(IX+-15)
	CALL	__stoiu
	LD	BC,177
	ADD	HL,BC
	PUSH	HL
	LD	BC,_towerAdd_data
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  476						gfx_TransparentSprite_NoClip(towerPurple, 177+x, 94);
	LD	BC,94
	PUSH	BC
	LD	BC,(IX+-15)
	CALL	__stoiu
	LD	BC,177
	ADD	HL,BC
	PUSH	HL
	LD	BC,_towerPurple_data
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  477						break;
	JR	L_210
;  478					case 7:
L_203:
;  479						gfx_TransparentSprite_NoClip(towerRemove, 177+x, 94);
	LD	BC,94
	PUSH	BC
	LD	BC,(IX+-15)
	CALL	__stoiu
	LD	BC,177
	ADD	HL,BC
	PUSH	HL
	LD	BC,_towerRemove_data
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  480						gfx_TransparentSprite_NoClip(towerOrange, 177+x, 94);
	LD	BC,94
	PUSH	BC
	LD	BC,(IX+-15)
	CALL	__stoiu
	LD	BC,177
	ADD	HL,BC
	PUSH	HL
	LD	BC,_towerOrange_data
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  481						break;
	JR	L_210
;  482					case 8:
L_204:
;  483						gfx_TransparentSprite_NoClip(towerRemove, 177+x, 94);
	LD	BC,94
	PUSH	BC
	LD	BC,(IX+-15)
	CALL	__stoiu
	LD	BC,177
	ADD	HL,BC
	PUSH	HL
	LD	BC,_towerRemove_data
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  484						gfx_TransparentSprite_NoClip(towerGreen, 177+x, 94);
	LD	BC,94
	PUSH	BC
	LD	BC,(IX+-15)
	CALL	__stoiu
	LD	BC,177
	ADD	HL,BC
	PUSH	HL
	LD	BC,_towerGreen_data
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  485						break;
	JR	L_210
;  486					case 9:
L_205:
;  487						gfx_TransparentSprite_NoClip(towerRemove, 177+x, 94);
	LD	BC,94
	PUSH	BC
	LD	BC,(IX+-15)
	CALL	__stoiu
	LD	BC,177
	ADD	HL,BC
	PUSH	HL
	LD	BC,_towerRemove_data
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  488						gfx_TransparentSprite_NoClip(towerPurple, 177+x, 94);
	LD	BC,94
	PUSH	BC
	LD	BC,(IX+-15)
	CALL	__stoiu
	LD	BC,177
	ADD	HL,BC
	PUSH	HL
	LD	BC,_towerPurple_data
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  489						break;
	JR	L_210
;  490					case -1:
L_206:
;  491						gfx_PrintStringXY("DEBUG",200,220);
	LD	BC,220
	PUSH	BC
	LD	BC,200
	PUSH	BC
	LD	BC,L__100
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  492						break;
	JR	L_210
;  493					default: 
L_207:
;  494						sprintf(buffer, "%i", k);
	LD	A,(IX+-13)
	UEXT	HL
	LD	L,A
	PUSH	HL
	LD	BC,L__101
	PUSH	BC
	PEA	IX+-11
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
;  495						gfx_PrintStringXY(buffer,200,200);
	LD	BC,200
	PUSH	BC
	PUSH	BC
	PEA	IX+-11
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  496						memcpy(buffer, emptyBuffer, sizeof(uint8_t) * 10);
	LD	BC,10
	PUSH	BC
	PEA	IX+-57
	PEA	IX+-11
	CALL	_memcpy
	POP	BC
	POP	BC
	POP	BC
;  497						break;
;  498					}
;  499				}
;  500	
;  501			
;  502			}
L_210:
	INC	(IX+-1)
L_211:
	LD	A,(IX+-1)
	CP	A,3
	JR	C,L_209
;  503			
;  504		}
L_218:
;  505		if (updates[UPDATE_AUTON]) {
	LD	IY,(IX+30)
	LD	A,(IY+3)
	OR	A,A
	JR	Z,L_219
;  506			gfx_SetColor(BLACK);//Reset outer boxes
	LD	BC,247
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  507			gfx_Rectangle_NoClip(168, 2, 14, 15);
	LD	BC,15
	PUSH	BC
	LD	BC,14
	PUSH	BC
	LD	BC,2
	PUSH	BC
	LD	BC,168
	PUSH	BC
	CALL	_gfx_Rectangle_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  508			gfx_Rectangle_NoClip(169, 3, 12, 13);
	LD	BC,13
	PUSH	BC
	LD	BC,12
	PUSH	BC
	LD	BC,3
	PUSH	BC
	LD	BC,169
	PUSH	BC
	CALL	_gfx_Rectangle_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  509			gfx_Rectangle_NoClip(183, 2, 14, 15);
	LD	BC,15
	PUSH	BC
	LD	BC,14
	PUSH	BC
	LD	BC,2
	PUSH	BC
	LD	BC,183
	PUSH	BC
	CALL	_gfx_Rectangle_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  510			gfx_Rectangle_NoClip(184, 3, 12, 13);
	LD	BC,13
	PUSH	BC
	LD	BC,12
	PUSH	BC
	LD	BC,3
	PUSH	BC
	LD	BC,184
	PUSH	BC
	CALL	_gfx_Rectangle_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  511			gfx_Rectangle_NoClip(176, 18, 14, 15);
	LD	BC,15
	PUSH	BC
	LD	BC,14
	PUSH	BC
	LD	BC,18
	PUSH	BC
	LD	BC,176
	PUSH	BC
	CALL	_gfx_Rectangle_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  512			gfx_Rectangle_NoClip(177, 19, 12, 13);
	LD	BC,13
	PUSH	BC
	LD	BC,12
	PUSH	BC
	LD	BC,19
	PUSH	BC
	LD	BC,177
	PUSH	BC
	CALL	_gfx_Rectangle_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  513			
;  514			gfx_SetTextFGColor(BLACK);
	LD	BC,247
	PUSH	BC
	CALL	_gfx_SetTextFGColor
	POP	BC
;  515	
;  516			gfx_TransparentSprite_NoClip(autonA, 172, 6);
	LD	BC,6
	PUSH	BC
	LD	BC,172
	PUSH	BC
	LD	BC,_autonA_data
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  517			gfx_TransparentSprite_NoClip(autonE, 187, 6);
	LD	BC,6
	PUSH	BC
	LD	BC,187
	PUSH	BC
	LD	BC,_autonE_data
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  518			gfx_TransparentSprite_NoClip(autonT, 180, 22);
	LD	BC,22
	PUSH	BC
	LD	BC,180
	PUSH	BC
	LD	BC,_autonT_data
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  519	
;  520			switch (*autonWinner)
	LD	HL,(IX+6)
	LD	HL,(HL)
	CALL	__seqcase
L__104:
	DW	3
	DW	0
	DB	0
	DW24	L_214	

	DW24	L_215	

	DW24	L_216	

	DW24	L_219	

;  521			{
;  522			case AUTON_TIE:
L_214:
;  523				gfx_Rectangle_NoClip(176, 18, 14, 15);
	LD	BC,15
	PUSH	BC
	LD	BC,14
	PUSH	BC
	LD	BC,18
	PUSH	BC
	LD	BC,176
	PUSH	BC
	CALL	_gfx_Rectangle_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  524				gfx_Rectangle_NoClip(177, 19, 12, 13);
	LD	BC,13
	PUSH	BC
	LD	BC,12
	PUSH	BC
	LD	BC,19
	PUSH	BC
	LD	BC,177
	PUSH	BC
	CALL	_gfx_Rectangle_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  525				gfx_TransparentSprite_NoClip(autonTSelected, 180, 22);
	LD	BC,22
	PUSH	BC
	LD	BC,180
	PUSH	BC
	LD	BC,_autonTSelected_data
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  526				break;
	JR	L_219
;  527			case AUTON_WIN:
L_215:
;  528				gfx_Rectangle_NoClip(168, 2, 14, 15);
	LD	BC,15
	PUSH	BC
	LD	BC,14
	PUSH	BC
	LD	BC,2
	PUSH	BC
	LD	BC,168
	PUSH	BC
	CALL	_gfx_Rectangle_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  529				gfx_Rectangle_NoClip(169, 3, 12, 13);
	LD	BC,13
	PUSH	BC
	LD	BC,12
	PUSH	BC
	LD	BC,3
	PUSH	BC
	LD	BC,169
	PUSH	BC
	CALL	_gfx_Rectangle_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  530				gfx_TransparentSprite_NoClip(autonASelected, 172, 6);
	LD	BC,6
	PUSH	BC
	LD	BC,172
	PUSH	BC
	LD	BC,_autonASelected_data
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  531				break;
	JR	L_219
;  532			case AUTON_LOSS:
L_216:
;  533				gfx_Rectangle_NoClip(183, 2, 14, 15);
	LD	BC,15
	PUSH	BC
	LD	BC,14
	PUSH	BC
	LD	BC,2
	PUSH	BC
	LD	BC,183
	PUSH	BC
	CALL	_gfx_Rectangle_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  534				gfx_Rectangle_NoClip(184, 3, 12, 13);
	LD	BC,13
	PUSH	BC
	LD	BC,12
	PUSH	BC
	LD	BC,3
	PUSH	BC
	LD	BC,184
	PUSH	BC
	CALL	_gfx_Rectangle_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  535				gfx_TransparentSprite_NoClip(autonESelected, 187, 6);
	LD	BC,6
	PUSH	BC
	LD	BC,187
	PUSH	BC
	LD	BC,_autonESelected_data
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  536				break;	
;  537			}
;  538		}
;  539	}
L_219:
	LD	SP,IX
	POP	IX
	RET	


;**************************** _draw ***************************
;Name                         Addr/Register   Size   Type
;_autonESelected_data                IMPORT     44   variable
;_autonASelected_data                IMPORT     44   variable
;_autonTSelected_data                IMPORT     44   variable
;_autonT_data                        IMPORT     44   variable
;_gfx_SetTextFGColor                 IMPORT  -----   function
;_gfx_Rectangle_NoClip               IMPORT  -----   function
;_gfx_PrintStringXY                  IMPORT  -----   function
;_towerRemove_data                   IMPORT   1371   variable
;_towerPurple_data                   IMPORT   1371   variable
;_towerGreen_data                    IMPORT   1371   variable
;_towerOrange_data                   IMPORT   1371   variable
;_towerAdd_data                      IMPORT   1371   variable
;_purpleCube_data                    IMPORT   1371   variable
;_greenCube_data                     IMPORT   1371   variable
;_orangeCube_data                    IMPORT   1371   variable
;_indexOf                            IMPORT  -----   function
;_selectionSort                      IMPORT  -----   function
;_abs                                IMPORT  -----   function
;_sprintf                            IMPORT  -----   function
;_recommendationScore_data           IMPORT    409   variable
;_shortRedTextBox_data               IMPORT    310   variable
;_redTextBox_data                    IMPORT    497   variable
;_shortPurpleTextBox_data            IMPORT    310   variable
;_shortGreenTextBox_data             IMPORT    310   variable
;_shortOrangeTextBox_data            IMPORT    310   variable
;_purpleTextBoxLong_data             IMPORT   1014   variable
;_greenTextBoxLong_data              IMPORT   1014   variable
;_orangeTextBoxLong_data             IMPORT   1014   variable
;_purpleTextBox_data                 IMPORT    497   variable
;_greenTextBox_data                  IMPORT    497   variable
;_orangeTextBox_data                 IMPORT    497   variable
;_valid                              IMPORT  -----   function
;_initGUI                            IMPORT  -----   function
;_memcpy                             IMPORT  -----   function
;_autonE_data                        IMPORT     44   variable
;_autonA_data                        IMPORT     44   variable
;_gfx_FillRectangle_NoClip           IMPORT  -----   function
;_gfx_GetStringWidth                 IMPORT  -----   function
;_printStringCentered                IMPORT  -----   function
;_gfx_SetColor                       IMPORT  -----   function
;_redAuton_data                      IMPORT    112   variable
;_blueAuton_data                     IMPORT    112   variable
;_redTeamTextBox_data                IMPORT    542   variable
;_blueTeamTextBox_data               IMPORT    542   variable
;_gfx_TransparentSprite_NoClip       IMPORT  -----   function
;empty233Array                       IX-103     18   variable
;validPrints                          IX-85     18   variable
;sortedDiffs                          IX-67     10   variable
;emptyBuffer                          IX-57     10   variable
;G_1                                  IX-47      3   variable
;temp180                              IX-44      3   variable
;temp144                              IX-41      3   variable
;temp140                              IX-38      3   variable
;empty3Array                          IX-35      3   variable
;diffs                                IX-32     10   variable
;G_0                                  IX-22      3   variable
;G_2                                  IX-19      1   variable
;G_3                                  IX-18      3   variable
;x                                    IX-15      2   variable
;k                                    IX-13      1   variable
;j                                    IX-12      1   variable
;buffer                               IX-11     10   variable
;i                                     IX-1      1   variable
;updates                              IX+30      3   parameter
;enemyScore                           IX+27      1   parameter
;allianceScore                        IX+24      1   parameter
;future                               IX+21      3   parameter
;enemyS                               IX+18      3   parameter
;allianceS                            IX+15      3   parameter
;towers                               IX+12      3   parameter
;col                                   IX+9      3   parameter
;autonWinner                           IX+6      3   parameter


; Stack Frame Size: 166 (bytes)
;       Spill Code: -1 (instruction)


	SEGMENT STRSECT
L__45:
	DB	"Ally"
	DB	0
L__46:
	DB	"Ally"
	DB	0
L__47:
	DB	"Enemy"
	DB	0
L__48:
	DB	"Enemy"
	DB	0
L__54:
	DB	"%u"
	DB	0
L__56:
	DB	"%u"
	DB	0
L__58:
	DB	"%u"
	DB	0
L__60:
	DB	"%u"
	DB	0
L__61:
	DB	"%u"
	DB	0
L__62:
	DB	"%u"
	DB	0
L__67:
	DB	"---"
	DB	0
L__69:
	DB	"---"
	DB	0
L__78:
	DB	"%c%i"
	DB	0
L__80:
	DB	"%c%i"
	DB	0
L__81:
	DB	"%c"
	DB	0
L__82:
	DB	"--"
	DB	0
L__83:
	DB	"%s"
	DB	0
L__91:
	DB	"%c%i"
	DB	0
L__93:
	DB	"%c"
	DB	0
L__95:
	DB	"---"
	DB	0
L__96:
	DB	"%s"
	DB	0
L__97:
	DB	"%c%i"
	DB	0
L__100:
	DB	"DEBUG"
	DB	0
L__101:
	DB	"%i"
	DB	0
	SEGMENT CODE
;  540	
;  541	
;  542	//Team, color, action
;  543	void valid(bool validPrints[2][3][3], uint8_t towers[], uint8_t allianceS[], uint8_t enemyS[]) {	
_valid:
	LD	HL,-14
	CALL	__frameset
;  544		uint8_t i;
;  545		uint8_t j;
;  546		uint8_t k;
;  547	
;  548		for (i = 0; i < 2; i++)
	LD	(IX+-2),0
	JR	L_239
L_237:
;  549			for (j = 0; j < 3; j++)
	LD	(IX+-1),0
	JR	L_236
L_234:
;  550			{
;  551				validPrints[i][j][CUBE_STACK] = !(allianceS[j]+enemyS[j] == 22);
	LD	A,(IX+-1)
	UEXT	HL
	LD	L,A
	LD	BC,(IX+12)
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	A,(IX+-1)
	UEXT	HL
	LD	L,A
	LD	DE,(IX+15)
	ADD	HL,DE
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	OR	A,A
	LD	BC,22
	SBC	HL,BC
	JR	Z,L_223
	LD	BC,1
	LD	(IX+-14),BC
	JR	L_224
L_223:
	LD	BC,0
	LD	(IX+-14),BC
L_224:
	LD	A,(IX+-2)
	UEXT	HL
	LD	L,A
	LD	A,9
	CALL	__imul_b
	LD	BC,(IX+6)
	ADD	HL,BC
	LD	BC,HL
	LD	A,(IX+-1)
	UEXT	HL
	LD	L,A
	LD	DE,HL
	ADD	HL,HL
	ADD	HL,DE
	ADD	HL,BC
	LD	(IX+-5),HL
	LD	A,(IX+-14)
	LD	HL,(IX+-5)
	LD	(HL),A
;  552				validPrints[i][j][TOWER_ADD] = !(towers[0] + towers[1] + towers[2] == 7);
	LD	HL,(IX+9)
	INC	HL
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	IY,(IX+9)
	LD	A,(IY)
	LD	BC,HL
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	BC,HL
	LD	A,(IY+2)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	OR	A,A
	LD	BC,7
	SBC	HL,BC
	JR	Z,L_227
	LD	BC,1
	LD	(IX+-8),BC
	JR	L_228
L_227:
	LD	BC,0
	LD	(IX+-8),BC
L_228:
	LD	HL,(IX+-5)
	INC	HL
	LD	A,(IX+-8)
	LD	(HL),A
;  553				validPrints[i][j][TOWER_REMOVE] = !(towers[j] == 0);
	LD	A,(IX+-1)
	UEXT	HL
	LD	L,A
	LD	BC,(IX+9)
	ADD	HL,BC
	LD	A,(HL)
	OR	A,A
	JR	Z,L_231
	LD	BC,1
	LD	(IX+-11),BC
	JR	L_232
L_231:
	LD	BC,0
	LD	(IX+-11),BC
L_232:
	LD	A,(IX+-11)
	LD	IY,(IX+-5)
	LEA	HL,IY+2
	LD	(HL),A
	INC	(IX+-1)
;  554			}
L_236:
	LD	A,(IX+-1)
	CP	A,3
	JR	C,L_234
	INC	(IX+-2)
L_239:
	LD	A,(IX+-2)
	CP	A,2
	JR	C,L_237
	LD	SP,IX
	POP	IX
	RET	


;**************************** _valid ***************************
;Name                         Addr/Register   Size   Type
;temp225                              IX-14      3   variable
;temp233                              IX-11      3   variable
;temp229                               IX-8      3   variable
;G_6                                   IX-5      3   variable
;i                                     IX-2      1   variable
;j                                     IX-1      1   variable
;enemyS                               IX+15      3   parameter
;allianceS                            IX+12      3   parameter
;towers                                IX+9      3   parameter
;validPrints                           IX+6      3   parameter


; Stack Frame Size: 32 (bytes)
;       Spill Code: -1 (instruction)


	XREF _memcpy:ROM
	XREF _sprintf:ROM
	XREF _symbols_gfx_pal:ROM
	XREF _towerRemove_data:ROM
	XREF _towerPurple_data:ROM
	XREF _towerOrange_data:ROM
	XREF _towerGreen_data:ROM
	XREF _towerAdd_data:ROM
	XREF _stackedCube_data:ROM
	XREF _shortRedTextBox_data:ROM
	XREF _shortPurpleTextBox_data:ROM
	XREF _shortOrangeTextBox_data:ROM
	XREF _shortGreenTextBox_data:ROM
	XREF _redTextBox_data:ROM
	XREF _redTeamTextBox_data:ROM
	XREF _redAuton_data:ROM
	XREF _recommendationScore_data:ROM
	XREF _purpleTextBoxLong_data:ROM
	XREF _purpleTextBox_data:ROM
	XREF _purpleCube_data:ROM
	XREF _plusMinusZero_data:ROM
	XREF _orangeTextBoxLong_data:ROM
	XREF _orangeTextBox_data:ROM
	XREF _orangeCube_data:ROM
	XREF _neutralTeamBox_data:ROM
	XREF _greenTextBoxLong_data:ROM
	XREF _greenTextBox_data:ROM
	XREF _greenCube_data:ROM
	XREF _greenAuton_data:ROM
	XREF _genericTeamColor_data:ROM
	XREF _genericCube_data:ROM
	XREF _genericAuton_data:ROM
	XREF _emptyTower_data:ROM
	XREF _deltaXText_data:ROM
	XREF _deltaTextBox_data:ROM
	XREF _bottomPanel_data:ROM
	XREF _blueTeamTextBox_data:ROM
	XREF _blueAuton_data:ROM
	XREF _autonTSelected_data:ROM
	XREF _autonT_data:ROM
	XREF _autonESelected_data:ROM
	XREF _autonE_data:ROM
	XREF _autonASelected_data:ROM
	XREF _autonA_data:ROM
	XREF _gfx_GetStringWidth:ROM
	XREF _gfx_TransparentSprite_NoClip:ROM
	XREF _gfx_SetTextFGColor:ROM
	XREF _gfx_PrintStringXY:ROM
	XREF _gfx_FillRectangle_NoClip:ROM
	XREF _gfx_Rectangle_NoClip:ROM
	XREF _gfx_VertLine_NoClip:ROM
	XREF _gfx_HorizLine_NoClip:ROM
	XREF _gfx_SetPixel:ROM
	XREF _gfx_FillScreen:ROM
	XREF _gfx_SetPalette:ROM
	XREF _gfx_SetTransparentColor:ROM
	XREF _gfx_SetColor:ROM
	XREF _abs:ROM
	XREF __idivs:ROM
	XREF __smulu:ROM
	XREF __bshl:ROM
	XREF __irems:ROM
	XREF __stoiu:ROM
	XREF __ildix:ROM
	XREF __istix:ROM
	XREF __frameset:ROM
	XREF __setflag:ROM
	XREF __icmpzero:ROM
	XREF __case24:ROM
	XREF __case8:ROM
	XREF __seqcase:ROM
	XREF __imul_b:ROM
	XDEF _valid
	XDEF _draw
	XDEF _debugPrintPalette
	XDEF _spriteCentered
	XDEF _printStringCentered
	XDEF _initGUI
	XDEF _selectionSort
	XDEF _swap
	XDEF _indexOf
	END
