; Zilog eZ80 ANSI C Compiler Release 3.4
; -optsize -noreduceopt -nomodsect -peephole -globalopt
; -localcse -const=ROM 
	FILE	"SRC\MAIN.C"
	.assume ADL=1
	SEGMENT CODE
;    1	/*
;    2	* --------------------------------------
;    3	* Program Name : Tower Takeover Calculator for TI - 84 CE
;    4	* Author : Thomas Ji
;    5	* License : N / A
;    6	* Description : Takes input from the user, showing the best possible movesand the results of all possible actions in Tower Takeover, by Vex.
;    7	* --------------------------------------
;    8	*/
;    9	
;   10	#include "main.h"
;   11	#include "graphics.h"
;   12	
;   13	#define TOWER_LIMIT 7
;   14	#define BLOCK_LIMIT 22
;   15	
;   16	
;   17	int main() {
_main:
	LD	HL,-39
	CALL	__frameset
;   18		// Defaults the auton winner to a tie
;   19		auton autonWinner = AUTON_TIE;
	LD	BC,0
	LD	(IX+-3),BC
;   20	
;   21		teamColor teamCol = TEAM_COLOR_RED;
	LD	(IX+-17),BC
;   22		uint8_t towers[3] = {0,0,0}
;   23	;	uint8_t allianceS[3] = {0,0,0}
	LEA	DE,IX+-6
	LD	HL,_0temp0
	LD	BC,3
	LDIR	
;   24	;	uint8_t enemyS[3] = {0,0,0}
	LEA	DE,IX+-9
	LD	HL,_1temp1
	LD	BC,3
	LDIR	
;   25	;	uint8_t i
	LEA	DE,IX+-12
	LD	HL,_2temp2
	LD	BC,3
	LDIR	
;   26	;
;   27	
;   28		uint8_t future[2][3][3]; ///ally/enemy | color | actions
;   29	
;   30		bool toUpdate[4];
;   31		uint8_t allianceScore = 0, enemyScore = 0;
	LD	(IX+-13),0
	LD	(IX+-14),0
;   32	
;   33		gfx_Begin();
	CALL	_gfx_Begin
;   34		initGUI();
	CALL	_initGUI
;   35	
;   36		kb_SetMode(MODE_3_CONTINUOUS);
	LD	A,(16056320)
	AND	A,252
	OR	A,3
	LD	(16056320),A
;   37	
;   38	
;   39		//int numKeysPressed = 0
;   40	
;   41		do {
;   42			while (kb_AnyKey());
L_4:
	CALL	_kb_AnyKey
	OR	A,A
	JR	NZ,L_4
;   43			while (!kb_AnyKey()); //Stops for a key press
L_6:
	CALL	_kb_AnyKey
	OR	A,A
	JR	Z,L_6
;   44	
;   45			update(towers, allianceS, enemyS, &autonWinner, toUpdate, &teamCol);
	PEA	IX+-17
	PEA	IX+-21
	PEA	IX+-3
	PEA	IX+-12
	PEA	IX+-9
	PEA	IX+-6
	CALL	_update
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;   46	
;   47			if (toUpdate[UPDATE_CALCULATIONS]) {
	LEA	IY,IX+-21
	LD	A,(IY+2)
	OR	A,A
	JR	Z,L_10
;   48				allianceScore = calcScore(towers, allianceS, autonWinner, TEAM_ALLIANCE);
	LD	BC,1
	PUSH	BC
	LD	BC,(IX+-3)
	PUSH	BC
	PEA	IX+-9
	PEA	IX+-6
	CALL	_calcScore
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	(IX+-13),A
;   49				enemyScore = calcScore(towers, enemyS, autonWinner, TEAM_ENEMY);
	LD	BC,2
	PUSH	BC
	LD	BC,(IX+-3)
	PUSH	BC
	PEA	IX+-12
	PEA	IX+-6
	CALL	_calcScore
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	(IX+-14),A
;   50				calcFuture(future, towers, allianceS, enemyS, autonWinner);
	LD	BC,(IX+-3)
	PUSH	BC
	PEA	IX+-12
	PEA	IX+-9
	PEA	IX+-6
	PEA	IX+-39
	CALL	_calcFuture
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;   51			}
L_10:
;   52			
;   53			draw(&autonWinner, &teamCol, towers, allianceS, enemyS, future, allianceScore, enemyScore, toUpdate);
	PEA	IX+-21
	LD	C,(IX+-14)
	LD	B,0
	PUSH	BC
	LD	C,(IX+-13)
	PUSH	BC
	PEA	IX+-39
	PEA	IX+-12
	PEA	IX+-9
	PEA	IX+-6
	PEA	IX+-17
	PEA	IX+-3
	CALL	_draw
	LD	IY,27
	ADD	IY,SP
;   54		} while (kb_Data[1] != kb_Graph);
	LD	A,(16056338)
	CP	A,1
	LD	SP,IY
	JR	NZ,L_4
;   55	
;   56		gfx_End();
	CALL	_gfx_End
	OR	A,A
;   57	
;   58		return 0;
	SBC	HL,HL
;   59	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _main ***************************
;Name                         Addr/Register   Size   Type
;_gfx_End                            IMPORT  -----   function
;_draw                               IMPORT  -----   function
;_calcFuture                         IMPORT  -----   function
;_calcScore                          IMPORT  -----   function
;_update                             IMPORT  -----   function
;_kb_AnyKey                          IMPORT  -----   function
;_initGUI                            IMPORT  -----   function
;_gfx_Begin                          IMPORT  -----   function
;_2temp2                             STATIC      3   variable
;_1temp1                             STATIC      3   variable
;_0temp0                             STATIC      3   variable
;future                               IX-39     18   variable
;toUpdate                             IX-21      4   variable
;teamCol                              IX-17      3   variable
;enemyScore                           IX-14      1   variable
;allianceScore                        IX-13      1   variable
;enemyS                               IX-12      3   variable
;allianceS                             IX-9      3   variable
;towers                                IX-6      3   variable
;autonWinner                           IX-3      3   variable


; Stack Frame Size: 45 (bytes)
;       Spill Code: 0 (instruction)


	SEGMENT TEXT
_0temp0:
	DB	0
	DB	0
	DB	0
_1temp1:
	DB	0
	DB	0
	DB	0
_2temp2:
	DB	0
	DB	0
	DB	0
	SEGMENT CODE
;   60	
;   61	
;   62	void update(uint8_t towers[], uint8_t allianceStack[], uint8_t enemyStack[],
;   63		auton* a, bool updates[], teamColor* col) {
_update:
	LD	HL,-132
	CALL	__frameset
;   64		uint8_t inc = 1;
	LD	(IX+-1),1
;   65		uint8_t oldTowers[3], oldAllianceStack[3], oldEnemyStack[3];
;   66		uint8_t towerTotal = 0, teamBlockTotal[3];
	LD	(IX+-3),0
;   67		uint8_t i;
;   68			char emptyBuffer[10];
;   69		//char * incString = malloc(3*sizeof(char));
;   70	
;   71		for (i = 0; i < 4; i++)
	LD	(IX+-2),0
	JR	L_18
L_16:
;   72			updates[i] = 0;
	LD	A,(IX+-2)
	UEXT	HL
	LD	L,A
	LD	BC,(IX+18)
	ADD	HL,BC
	LD	(HL),0
	INC	(IX+-2)
L_18:
	LD	A,(IX+-2)
	CP	A,4
	JR	C,L_16
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-132
	CALL	__istix
	POP	HL
	POP	BC
;   73		kb_Scan(); //DEBUG
	CALL	_kb_Scan
	PUSH	BC
	LD	BC,-132
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
;   74	
;   75			 if (kb_Data[4] & kb_2)	inc = 2;
	LD	A,(16056344)
	AND	A,2
	JR	Z,L_34
	LD	(IX+-1),2
;   76		else if (kb_Data[5] & kb_3)	inc = 3;
	JR	L_44
L_34:
	LD	A,(16056346)
	AND	A,2
	JR	Z,L_32
	LD	(IX+-1),3
;   77		else if (kb_Data[3] & kb_4)	inc = 4;
	JR	L_44
L_32:
	LD	A,(16056342)
	AND	A,4
	JR	Z,L_30
	LD	(IX+-1),4
;   78		else if (kb_Data[4] & kb_5)	inc = 5;
	JR	L_44
L_30:
	LD	A,(16056344)
	AND	A,4
	JR	Z,L_28
	LD	(IX+-1),5
;   79		else if (kb_Data[5] & kb_6)	inc = 6;
	JR	L_44
L_28:
	LD	A,(16056346)
	AND	A,4
	JR	Z,L_26
	LD	(IX+-1),6
;   80		else if (kb_Data[3] & kb_7)	inc = 7;
	JR	L_44
L_26:
	LD	A,(16056342)
	AND	A,8
	JR	Z,L_24
	LD	(IX+-1),7
;   81		else if (kb_Data[4] & kb_8)	inc = 8;
	JR	L_44
L_24:
	LD	A,(16056344)
	AND	A,8
	JR	Z,L_22
	LD	(IX+-1),8
;   82		else if (kb_Data[5] & kb_9)	inc = 9;
	JR	L_44
L_22:
	LD	A,(16056346)
	AND	A,8
	JR	Z,L_44
	LD	(IX+-1),9
L_44:
;   83	
;   84		if (inc != 1) {
	LD	A,(IX+-1)
	CP	A,1
	JR	Z,L_45
;   85			while (kb_AnyKey());
L_35:
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-132
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_kb_AnyKey
	PUSH	BC
	LD	BC,-132
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	OR	A,A
	JR	NZ,L_35
;   86	
;   87			do {
L_40:
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-132
	CALL	__istix
	POP	HL
	POP	BC
;   88				kb_Scan();
	CALL	_kb_Scan
	PUSH	BC
	LD	BC,-132
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-132
	CALL	__istix
	POP	HL
	POP	BC
;   89			} while (!(kb_AnyKey() && !(kb_Data[3] & 7 << 4 || kb_Data[4] & 7 << 4 || kb_Data[5] & 7 << 4))); 
	CALL	_kb_AnyKey
	PUSH	BC
	LD	BC,-132
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	OR	A,A
	JR	Z,L_40
	LD	A,(16056342)
	AND	A,112
	JR	NZ,L_40
	LD	A,(16056344)
	AND	A,112
	JR	NZ,L_40
	LD	A,(16056346)
	AND	A,112
	JR	NZ,L_40
;   90	
;   91	
;   92		}
L_45:
;   93	
;   94		memcpy(oldTowers, towers, 3 * sizeof(uint8_t));
	LD	BC,3
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	PEA	IX+-120
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-132
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_memcpy
	PUSH	BC
	LD	BC,-132
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;   95		memcpy(oldAllianceStack, allianceStack, 3 * sizeof(uint8_t));
	LD	BC,3
	PUSH	BC
	LD	BC,(IX+9)
	PUSH	BC
	PEA	IX+-123
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-132
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_memcpy
	PUSH	BC
	LD	BC,-132
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;   96		memcpy(oldEnemyStack, enemyStack, 3 * sizeof(uint8_t));
	LD	BC,3
	PUSH	BC
	LD	BC,(IX+12)
	PUSH	BC
	PEA	IX+-117
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-132
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_memcpy
	PUSH	BC
	LD	BC,-132
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;   97	
;   98		if (kb_Data[1] & kb_Yequ) {
	LD	A,(16056338)
	AND	A,16
	JR	Z,L_52
;   99			updates[UPDATE_TEAM_COLORS] = true;
	LD	HL,(IX+18)
	LD	A,1
	LD	(HL),A
;  100			updates[UPDATE_AUTON] = true;
	LD	IY,(IX+18)
	LEA	HL,IY+3
	LD	(HL),A
;  101			*col = !*col;
	LD	HL,(IX+21)
	LD	HL,(HL)
	CALL	__icmpzero
	JR	NZ,L_47
	LD	BC,1
	LD	(IX+-57),BC
	JR	L_48
L_47:
	LD	BC,0
	LD	(IX+-57),BC
L_48:
	LD	HL,(IX+21)
	LD	BC,(IX+-57)
	LD	(HL),BC
;  102		}
;  103		else if (kb_Data[1] & kb_Trace)
	JR	L_57
L_52:
	LD	A,(16056338)
	AND	A,2
	JR	Z,L_57
;  104			updates[UPDATE_RESET_BUTTON] = true;
	LD	HL,(IX+18)
	INC	HL
	LD	(HL),1
L_57:
;  105		//NOTE: The quit button is incorporated in the main loop
;  106	
;  107		for (i = 0; i < 3; i++)
	LD	(IX+-2),0
	JR	L_56
L_54:
;  108		{
;  109			towerTotal += towers[i];
	LD	A,(IX+-2)
	UEXT	HL
	LD	L,A
	LD	BC,(IX+6)
	ADD	HL,BC
	LD	A,(HL)
	ADD	A,(IX+-3)
	LD	(IX+-3),A
;  110			teamBlockTotal[i] = allianceStack[i] + enemyStack[i];
	LD	A,(IX+-2)
	UEXT	HL
	LD	L,A
	LD	A,(IX+-2)
	LD	BC,(IX+9)
	ADD	HL,BC
	LD	(IX+-126),HL	; spill
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-1),HL	; unspill
	POP	IY
	UEXT	HL
	LD	L,A
	LD	A,(IX+-2)
	LD	BC,(IX+12)
	ADD	HL,BC
	LD	IY,HL
	UEXT	HL
	LD	L,A
	LD	(IX+-126),HL	; spill
	PUSH	IY
	LEA	IY,IX+-128	; unspill
	LD	HL,(IY+-1)
	POP	IY
	LD	A,(HL)
	LD	HL,(IX+-126)	; unspill
	LD	BC,HL
	LEA	HL,IX+-6
	ADD	HL,BC
	ADD	A,(IY)
	LD	(HL),A
	INC	(IX+-2)
;  111		}
L_56:
	LD	A,(IX+-2)
	CP	A,3
	JR	C,L_54
;  112	
;  113	
;  114			 if (kb_Data[1] & kb_2nd)		towers[0] = (towerTotal + inc) > TOWER_LIMIT ? TOWER_LIMIT - (towerTotal - towers[0]) : inc + towers[0];
	LD	A,(16056338)
	AND	A,32
	JR	Z,L_164
	LD	A,(IX+-3)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	A,(IX+-1)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	BC,HL
	LD	HL,7
	OR	A,A
	SBC	HL,BC
	JP	P,L_60
	LD	A,(IX+-3)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	HL,(IX+6)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	DE,HL
	LD	HL,BC
	OR	A,A
	SBC	HL,DE
	LD	BC,HL
	LD	HL,7
	OR	A,A
	SBC	HL,BC
	LD	(IX+-105),HL
	JR	L_61
L_60:
	LD	HL,(IX+6)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	A,(IX+-1)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	(IX+-105),HL
L_61:
	LD	A,(IX+-105)
	LD	HL,(IX+6)
	LD	(HL),A
;  115		else if (kb_Data[1] & kb_Mode)		towers[1] = (towerTotal + inc) > TOWER_LIMIT ? TOWER_LIMIT - (towerTotal - towers[1]) : inc + towers[1];
	JR	L_169
L_164:
	LD	A,(16056338)
	AND	A,64
	JR	Z,L_162
	LD	A,(IX+-3)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	A,(IX+-1)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	BC,HL
	LD	HL,7
	OR	A,A
	SBC	HL,BC
	JP	P,L_64
	LD	BC,(IX+6)
	INC	BC
	LD	(IX+-9),BC
	LD	A,(IX+-3)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	HL,(IX+-9)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	DE,HL
	LD	HL,BC
	OR	A,A
	SBC	HL,DE
	LD	BC,HL
	LD	HL,7
	OR	A,A
	SBC	HL,BC
	LD	(IX+-108),HL
	JR	L_65
L_64:
	LD	BC,(IX+6)
	INC	BC
	LD	(IX+-9),BC
	LD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	A,(IX+-1)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	(IX+-108),HL
L_65:
	LD	A,(IX+-108)
	LD	HL,(IX+-9)
	LD	(HL),A
;  116		else if (kb_Data[1] & kb_Del) 		towers[2] = (towerTotal + inc) > TOWER_LIMIT ? TOWER_LIMIT - (towerTotal - towers[2]) : inc + towers[2];
	JR	L_169
L_162:
	LD	A,(16056338)
	AND	A,128
	JR	Z,L_160
	LD	A,(IX+-3)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	A,(IX+-1)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	BC,HL
	LD	HL,7
	OR	A,A
	SBC	HL,BC
	JP	P,L_68
	LD	IY,(IX+6)
	LEA	IY,IY+2
	LD	(IX+-12),IY
	LD	A,(IX+-3)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	HL,(IX+-12)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	DE,HL
	LD	HL,BC
	OR	A,A
	SBC	HL,DE
	LD	BC,HL
	LD	HL,7
	OR	A,A
	SBC	HL,BC
	LD	(IX+-111),HL
	JR	L_69
L_68:
	LD	IY,(IX+6)
	LEA	IY,IY+2
	LD	(IX+-12),IY
	LD	HL,(IX+-12)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	A,(IX+-1)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	(IX+-111),HL
L_69:
	LD	A,(IX+-111)
	LD	HL,(IX+-12)
	LD	(HL),A
;  117		else if (kb_Data[2] & kb_Alpha)		towers[0] = (towers[0] - inc) < 0 ? 0 : towers[0] - inc;
	JR	L_169
L_160:
	LD	A,(16056340)
	AND	A,128
	JR	Z,L_158
	LD	HL,(IX+6)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	A,(IX+-1)
	UEXT	HL
	LD	L,A
	LD	DE,HL
	LD	HL,BC
	OR	A,A
	SBC	HL,DE
	LD	(IX+-60),HL
	CALL	__icmpzero
	JP	P,L_72
	LD	BC,0
	LD	(IX+-114),BC
	JR	L_73
L_72:
	LD	BC,(IX+-60)
	LD	(IX+-114),BC
L_73:
	LD	A,(IX+-114)
	LD	HL,(IX+6)
	LD	(HL),A
;  118		else if (kb_Data[3] & kb_GraphVar)	towers[1] = (towers[1] - inc) < 0 ? 0 : towers[1] - inc;
	JR	L_169
L_158:
	LD	A,(16056342)
	AND	A,128
	JR	Z,L_156
	LD	BC,(IX+6)
	INC	BC
	LD	(IX+-63),BC
	LD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	A,(IX+-1)
	UEXT	HL
	LD	L,A
	LD	DE,HL
	LD	HL,BC
	OR	A,A
	SBC	HL,DE
	LD	(IX+-66),HL
	CALL	__icmpzero
	JP	P,L_76
	LD	BC,0
	LD	(IX+-15),BC
	JR	L_77
L_76:
	LD	BC,(IX+-66)
	LD	(IX+-15),BC
L_77:
	LD	A,(IX+-15)
	LD	HL,(IX+-63)
	LD	(HL),A
;  119		else if (kb_Data[4] & kb_Stat) 		towers[2] = (towers[2] - inc) < 0 ? 0 : towers[2] - inc;
	JR	L_169
L_156:
	LD	A,(16056344)
	AND	A,128
	JR	Z,L_154
	LD	IY,(IX+6)
	LEA	IY,IY+2
	LD	(IX+-69),IY
	LD	HL,(IX+-69)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	A,(IX+-1)
	UEXT	HL
	LD	L,A
	LD	DE,HL
	LD	HL,BC
	OR	A,A
	SBC	HL,DE
	LD	(IX+-72),HL
	CALL	__icmpzero
	JP	P,L_80
	LD	BC,0
	LD	(IX+-18),BC
	JR	L_81
L_80:
	LD	BC,(IX+-72)
	LD	(IX+-18),BC
L_81:
	LD	A,(IX+-18)
	LD	HL,(IX+-69)
	LD	(HL),A
;  120		else if (kb_Data[2] & kb_Math) 		allianceStack[0] = (teamBlockTotal[0] + inc) > BLOCK_LIMIT ? BLOCK_LIMIT - enemyStack[0] : inc + allianceStack[0];
	JR	L_169
L_154:
	LD	A,(16056340)
	AND	A,64
	JR	Z,L_152
	LD	A,(IX+-6)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	A,(IX+-1)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	BC,HL
	LD	HL,22
	OR	A,A
	SBC	HL,BC
	JP	P,L_84
	LD	HL,(IX+12)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	HL,22
	OR	A,A
	SBC	HL,BC
	LD	(IX+-21),HL
	JR	L_85
L_84:
	LD	HL,(IX+9)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	A,(IX+-1)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	(IX+-21),HL
L_85:
	LD	A,(IX+-21)
	LD	HL,(IX+9)
	LD	(HL),A
;  121		else if (kb_Data[2] & kb_Recip) 	allianceStack[1] = (teamBlockTotal[1] + inc) > BLOCK_LIMIT ? BLOCK_LIMIT - enemyStack[1] : inc + allianceStack[1];
	JR	L_169
L_152:
	LD	A,(16056340)
	AND	A,32
	JR	Z,L_150
	LEA	HL,IX+-6
	INC	HL
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	A,(IX+-1)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	BC,HL
	LD	HL,22
	OR	A,A
	SBC	HL,BC
	JP	P,L_88
	LD	HL,(IX+12)
	INC	HL
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	HL,22
	OR	A,A
	SBC	HL,BC
	LD	(IX+-24),HL
	JR	L_89
L_88:
	LD	HL,(IX+9)
	INC	HL
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	A,(IX+-1)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	(IX+-24),HL
L_89:
	LD	A,(IX+-24)
	LD	HL,(IX+9)
	INC	HL
	LD	(HL),A
;  122		else if (kb_Data[2] & kb_Square) 	allianceStack[2] = (teamBlockTotal[2] + inc) > BLOCK_LIMIT ? BLOCK_LIMIT - enemyStack[2] : inc + allianceStack[2];
	JR	L_169
L_150:
	LD	A,(16056340)
	AND	A,16
	JR	Z,L_148
	LEA	HL,IX+-4
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	A,(IX+-1)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	BC,HL
	LD	HL,22
	OR	A,A
	SBC	HL,BC
	JP	P,L_92
	LD	IY,(IX+12)
	LEA	HL,IY+2
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	HL,22
	OR	A,A
	SBC	HL,BC
	LD	(IX+-27),HL
	JR	L_93
L_92:
	LD	IY,(IX+9)
	LEA	HL,IY+2
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	A,(IX+-1)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	(IX+-27),HL
L_93:
	LD	A,(IX+-27)
	LD	IY,(IX+9)
	LEA	HL,IY+2
	LD	(HL),A
;  123		else if (kb_Data[3] & kb_Apps) 		allianceStack[0] = allianceStack[0] - inc < 0 ? 0 : allianceStack[0] - inc;
	JR	L_169
L_148:
	LD	A,(16056342)
	AND	A,64
	JR	Z,L_146
	LD	HL,(IX+9)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	A,(IX+-1)
	UEXT	HL
	LD	L,A
	LD	DE,HL
	LD	HL,BC
	OR	A,A
	SBC	HL,DE
	LD	(IX+-75),HL
	CALL	__icmpzero
	JP	P,L_96
	LD	BC,0
	LD	(IX+-30),BC
	JR	L_97
L_96:
	LD	BC,(IX+-75)
	LD	(IX+-30),BC
L_97:
	LD	A,(IX+-30)
	LD	HL,(IX+9)
	LD	(HL),A
;  124		else if (kb_Data[3] & kb_Sin) 		allianceStack[1] = allianceStack[1] - inc < 0 ? 0 : allianceStack[1] - inc;
	JR	L_169
L_146:
	LD	A,(16056342)
	AND	A,32
	JR	Z,L_144
	LD	BC,(IX+9)
	INC	BC
	LD	(IX+-78),BC
	LD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	A,(IX+-1)
	UEXT	HL
	LD	L,A
	LD	DE,HL
	LD	HL,BC
	OR	A,A
	SBC	HL,DE
	LD	(IX+-81),HL
	CALL	__icmpzero
	JP	P,L_100
	LD	BC,0
	LD	(IX+-33),BC
	JR	L_101
L_100:
	LD	BC,(IX+-81)
	LD	(IX+-33),BC
L_101:
	LD	A,(IX+-33)
	LD	HL,(IX+-78)
	LD	(HL),A
;  125		else if (kb_Data[3] & kb_Comma) 	allianceStack[2] = allianceStack[2] - inc < 0 ? 0 : allianceStack[2] - inc;
	JR	L_169
L_144:
	LD	A,(16056342)
	AND	A,16
	JR	Z,L_142
	LD	IY,(IX+9)
	LEA	IY,IY+2
	LD	(IX+-84),IY
	LD	HL,(IX+-84)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	A,(IX+-1)
	UEXT	HL
	LD	L,A
	LD	DE,HL
	LD	HL,BC
	OR	A,A
	SBC	HL,DE
	LD	(IX+-87),HL
	CALL	__icmpzero
	JP	P,L_104
	LD	BC,0
	LD	(IX+-36),BC
	JR	L_105
L_104:
	LD	BC,(IX+-87)
	LD	(IX+-36),BC
L_105:
	LD	A,(IX+-36)
	LD	HL,(IX+-84)
	LD	(HL),A
;  126		else if (kb_Data[5] & kb_Vars) 		enemyStack[0] = teamBlockTotal[0] + inc > BLOCK_LIMIT ? BLOCK_LIMIT - allianceStack[0] : inc + enemyStack[0];
	JR	L_169
L_142:
	LD	A,(16056346)
	AND	A,64
	JR	Z,L_140
	LD	A,(IX+-6)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	A,(IX+-1)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	BC,HL
	LD	HL,22
	OR	A,A
	SBC	HL,BC
	JP	P,L_108
	LD	HL,(IX+9)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	HL,22
	OR	A,A
	SBC	HL,BC
	LD	(IX+-39),HL
	JR	L_109
L_108:
	LD	HL,(IX+12)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	A,(IX+-1)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	(IX+-39),HL
L_109:
	LD	A,(IX+-39)
	LD	HL,(IX+12)
	LD	(HL),A
;  127		else if (kb_Data[5] & kb_Tan) 		enemyStack[1] = teamBlockTotal[1] + inc > BLOCK_LIMIT ? BLOCK_LIMIT - allianceStack[1] : inc + enemyStack[1];
	JR	L_169
L_140:
	LD	A,(16056346)
	AND	A,32
	JR	Z,L_138
	LEA	HL,IX+-6
	INC	HL
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	A,(IX+-1)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	BC,HL
	LD	HL,22
	OR	A,A
	SBC	HL,BC
	JP	P,L_112
	LD	HL,(IX+9)
	INC	HL
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	HL,22
	OR	A,A
	SBC	HL,BC
	LD	(IX+-42),HL
	JR	L_113
L_112:
	LD	HL,(IX+12)
	INC	HL
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	A,(IX+-1)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	(IX+-42),HL
L_113:
	LD	A,(IX+-42)
	LD	HL,(IX+12)
	INC	HL
	LD	(HL),A
;  128		else if (kb_Data[5] & kb_RParen) 	enemyStack[2] = teamBlockTotal[2] + inc > BLOCK_LIMIT ? BLOCK_LIMIT - allianceStack[2] : inc + enemyStack[2];
	JR	L_169
L_138:
	LD	A,(16056346)
	AND	A,16
	JR	Z,L_136
	LEA	HL,IX+-4
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	A,(IX+-1)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	BC,HL
	LD	HL,22
	OR	A,A
	SBC	HL,BC
	JP	P,L_116
	LD	IY,(IX+9)
	LEA	HL,IY+2
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	HL,22
	OR	A,A
	SBC	HL,BC
	LD	(IX+-45),HL
	JR	L_117
L_116:
	LD	IY,(IX+12)
	LEA	HL,IY+2
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	A,(IX+-1)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	(IX+-45),HL
L_117:
	LD	A,(IX+-45)
	LD	IY,(IX+12)
	LEA	HL,IY+2
	LD	(HL),A
;  129		else if (kb_Data[6] & kb_Clear) 	enemyStack[0] = enemyStack[0] - inc < 0 ? 0 : enemyStack[0] - inc;
	JR	L_169
L_136:
	LD	A,(16056348)
	AND	A,64
	JR	Z,L_134
	LD	HL,(IX+12)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	A,(IX+-1)
	UEXT	HL
	LD	L,A
	LD	DE,HL
	LD	HL,BC
	OR	A,A
	SBC	HL,DE
	LD	(IX+-90),HL
	CALL	__icmpzero
	JP	P,L_120
	LD	BC,0
	LD	(IX+-48),BC
	JR	L_121
L_120:
	LD	BC,(IX+-90)
	LD	(IX+-48),BC
L_121:
	LD	A,(IX+-48)
	LD	HL,(IX+12)
	LD	(HL),A
;  130		else if (kb_Data[6] & kb_Power) 	enemyStack[1] = enemyStack[1] - inc < 0 ? 0 : enemyStack[1] - inc;
	JR	L_169
L_134:
	LD	A,(16056348)
	AND	A,32
	JR	Z,L_132
	LD	BC,(IX+12)
	INC	BC
	LD	(IX+-93),BC
	LD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	A,(IX+-1)
	UEXT	HL
	LD	L,A
	LD	DE,HL
	LD	HL,BC
	OR	A,A
	SBC	HL,DE
	LD	(IX+-96),HL
	CALL	__icmpzero
	JP	P,L_124
	LD	BC,0
	LD	(IX+-51),BC
	JR	L_125
L_124:
	LD	BC,(IX+-96)
	LD	(IX+-51),BC
L_125:
	LD	A,(IX+-51)
	LD	HL,(IX+-93)
	LD	(HL),A
;  131		else if (kb_Data[6] & kb_Div) 		enemyStack[2] = enemyStack[2] - inc < 0 ? 0 : enemyStack[2] - inc;
	JR	L_169
L_132:
	LD	A,(16056348)
	AND	A,16
	JR	Z,L_169
	LD	IY,(IX+12)
	LEA	IY,IY+2
	LD	(IX+-99),IY
	LD	HL,(IX+-99)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	A,(IX+-1)
	UEXT	HL
	LD	L,A
	LD	DE,HL
	LD	HL,BC
	OR	A,A
	SBC	HL,DE
	LD	(IX+-102),HL
	CALL	__icmpzero
	JP	P,L_128
	LD	BC,0
	LD	(IX+-54),BC
	JR	L_129
L_128:
	LD	BC,(IX+-102)
	LD	(IX+-54),BC
L_129:
	LD	A,(IX+-54)
	LD	HL,(IX+-99)
	LD	(HL),A
L_169:
;  132	
;  133		if (memcmp(towers, oldTowers, sizeof(towers)) ||
	LD	BC,3
	PUSH	BC
	PEA	IX+-120
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_memcmp
	POP	BC
	POP	BC
	POP	BC
	CALL	__icmpzero
	JR	NZ,L_168
;  134			memcmp(allianceStack, oldAllianceStack, sizeof(allianceStack)) ||
	LD	BC,3
	PUSH	BC
	PEA	IX+-123
	LD	BC,(IX+9)
	PUSH	BC
	CALL	_memcmp
	POP	BC
	POP	BC
	POP	BC
	CALL	__icmpzero
	JR	NZ,L_168
;  135			memcmp(enemyStack, oldEnemyStack, sizeof(enemyStack)))
	LD	BC,3
	PUSH	BC
	PEA	IX+-117
	LD	BC,(IX+12)
	PUSH	BC
	CALL	_memcmp
	POP	BC
	POP	BC
	POP	BC
	CALL	__icmpzero
	JR	Z,L_173
L_168:
;  136				updates[UPDATE_CALCULATIONS] = true;
	LD	IY,(IX+18)
	LEA	HL,IY+2
	LD	(HL),1
L_173:
;  137	
;  138		switch (kb_Data[2])
	LD	A,(16056340)
	UEXT	HL
	LD	L,A
	CALL	__case8
L__63:
	DW	3
	DB	2
	DW24	L_172	

	DB	4
	DW24	L_171	

	DB	8
	DW24	L_170	

	DW24	L_174	

;  139		{
;  140		case kb_Log:
L_170:
;  141			*a = AUTON_WIN;
	LD	HL,(IX+15)
	LD	BC,1
	LD	(HL),BC
;  142			updates[UPDATE_AUTON] = true;
	LD	IY,(IX+18)
	LEA	HL,IY+3
	LD	A,1
	LD	(HL),A
;  143			updates[UPDATE_CALCULATIONS] = true;
	LEA	HL,IY+2
	LD	(HL),A
;  144			break;
	JR	L_174
;  145		case kb_Ln:
L_171:
;  146			*a = AUTON_LOSS;
	LD	HL,(IX+15)
	LD	BC,2
	LD	(HL),BC
;  147			updates[UPDATE_AUTON] = true;
	LD	IY,(IX+18)
	LEA	HL,IY+3
	LD	A,1
	LD	(HL),A
;  148			updates[UPDATE_CALCULATIONS] = true;
	LEA	HL,IY+2
	LD	(HL),A
;  149			break;
	JR	L_174
;  150		case kb_Sto:
L_172:
;  151			*a = AUTON_TIE;
	LD	HL,(IX+15)
	LD	BC,0
	LD	(HL),BC
;  152			updates[UPDATE_AUTON] = true;
	LD	IY,(IX+18)
	LEA	HL,IY+3
	LD	A,1
	LD	(HL),A
;  153			updates[UPDATE_CALCULATIONS] = true;
	LEA	HL,IY+2
	LD	(HL),A
;  154			break;
;  155		}
;  156	
;  157	
;  158	
;  159	
;  160	}
L_174:
	LD	SP,IX
	POP	IX
	RET	


;**************************** _update ***************************
;Name                         Addr/Register   Size   Type
;_memcmp                             IMPORT  -----   function
;_memcpy                             IMPORT  -----   function
;_kb_AnyKey                          IMPORT  -----   function
;_kb_Scan                            IMPORT  -----   function
;oldAllianceStack                    IX-123      3   variable
;oldTowers                           IX-120      3   variable
;oldEnemyStack                       IX-117      3   variable
;temp70                              IX-114      3   variable
;temp66                              IX-111      3   variable
;temp62                              IX-108      3   variable
;temp58                              IX-105      3   variable
;G_15                                IX-102      3   variable
;G_16                                 IX-99      3   variable
;G_13                                 IX-96      3   variable
;G_14                                 IX-93      3   variable
;G_12                                 IX-90      3   variable
;G_10                                 IX-87      3   variable
;G_11                                 IX-84      3   variable
;G_8                                  IX-81      3   variable
;G_9                                  IX-78      3   variable
;G_7                                  IX-75      3   variable
;G_5                                  IX-72      3   variable
;G_6                                  IX-69      3   variable
;G_3                                  IX-66      3   variable
;G_4                                  IX-63      3   variable
;G_2                                  IX-60      3   variable
;temp49                               IX-57      3   variable
;temp126                              IX-54      3   variable
;temp122                              IX-51      3   variable
;temp118                              IX-48      3   variable
;temp114                              IX-45      3   variable
;temp110                              IX-42      3   variable
;temp106                              IX-39      3   variable
;temp102                              IX-36      3   variable
;temp98                               IX-33      3   variable
;temp94                               IX-30      3   variable
;temp90                               IX-27      3   variable
;temp86                               IX-24      3   variable
;temp82                               IX-21      3   variable
;temp78                               IX-18      3   variable
;temp74                               IX-15      3   variable
;G_1                                  IX-12      3   variable
;G_0                                   IX-9      3   variable
;teamBlockTotal                        IX-6      3   variable
;towerTotal                            IX-3      1   variable
;i                                     IX-2      1   variable
;inc                                   IX-1      1   variable
;col                                  IX+21      3   parameter
;updates                              IX+18      3   parameter
;a                                    IX+15      3   parameter
;enemyStack                           IX+12      3   parameter
;allianceStack                         IX+9      3   parameter
;towers                                IX+6      3   parameter


; Stack Frame Size: 156 (bytes)
;       Spill Code: -1 (instruction)


;  161	
;  162	
;  163	uint8_t calcScore(uint8_t towers[], uint8_t stack[], auton a, team t) {
_calcScore:
	LD	HL,-8
	CALL	__frameset
;  164		uint8_t count = 0;
	LD	(IX+-2),0
;  165	
;  166		uint8_t i;
;  167		for (i = 0; i < 3; i++)
	LD	(IX+-1),0
	JR	L_178
L_176:
;  168			count += (towers[i] + 1) * stack[i];
	LD	A,(IX+-1)
	UEXT	HL
	LD	L,A
	LD	A,(IX+-1)
	LD	BC,(IX+6)
	ADD	HL,BC
	LD	B,(HL)
	INC	B
	UEXT	HL
	LD	L,A
	LD	DE,(IX+9)
	ADD	HL,DE
	LD	C,(HL)
	MLT	BC
	LD	A,C
	ADD	A,(IX+-2)
	LD	(IX+-2),A
	INC	(IX+-1)
L_178:
	LD	A,(IX+-1)
	CP	A,3
	JR	C,L_176
;  169	
;  170		count += (a == t ? 6 : a == AUTON_TIE ? 3 : 0);
	LD	BC,(IX+15)
	LD	HL,(IX+12)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_185
	LD	BC,6
	LD	(IX+-5),BC
	JR	L_186
L_185:
	LD	HL,(IX+12)
	CALL	__icmpzero
	JR	NZ,L_181
	LD	BC,3
	LD	(IX+-8),BC
	JR	L_182
L_181:
	LD	BC,0
	LD	(IX+-8),BC
L_182:
	LD	BC,(IX+-8)
	LD	(IX+-5),BC
L_186:
	LD	B,(IX+-5)
	LD	A,(IX+-2)
	ADD	A,B
	LD	(IX+-2),A
;  171		return count;
;  172	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _calcScore ***************************
;Name                         Addr/Register   Size   Type
;temp179                               IX-8      3   variable
;temp183                               IX-5      3   variable
;count                                 IX-2      1   variable
;i                                     IX-1      1   variable
;t                                    IX+15      3   parameter
;a                                    IX+12      3   parameter
;stack                                 IX+9      3   parameter
;towers                                IX+6      3   parameter


; Stack Frame Size: 26 (bytes)
;       Spill Code: -1 (instruction)


;  173	
;  174	void calcFuture(uint8_t future[2][3][3], uint8_t towers[3], uint8_t allianceStack[3], uint8_t enemyStack[3], auton a) {
_calcFuture:
	LD	HL,-53
	CALL	__frameset
;  175		uint8_t tempTower[3];
;  176		uint8_t teamStacks[2][3];
;  177		uint8_t x, i;
;  178	
;  179	
;  180		for (x = 0; x < 2; x++) { //for each team
	LD	(IX+-1),0
	JR	L_203
L_201:
;  181			for (i = 0; i < 3; i++) { //for each color
	LD	(IX+-2),0
	JR	L_200
L_198:
;  182				memcpy(teamStacks[0], allianceStack, 3*sizeof(uint8_t));
	LD	BC,3
	PUSH	BC
	LD	BC,(IX+12)
	PUSH	BC
	PEA	IX+-11
	CALL	_memcpy
	POP	BC
	POP	BC
	POP	BC
;  183				memcpy(teamStacks[1], enemyStack, 3*sizeof(uint8_t));
	LD	BC,3
	PUSH	BC
	LD	BC,(IX+15)
	PUSH	BC
	LEA	BC,IX+-8
	PUSH	BC
	CALL	_memcpy
	POP	BC
	POP	BC
	POP	BC
;  184				memcpy(tempTower, towers, 3*sizeof(uint8_t));
	LD	BC,3
	PUSH	BC
	LD	BC,(IX+9)
	PUSH	BC
	PEA	IX+-14
	CALL	_memcpy
	POP	BC
	POP	BC
	POP	BC
;  185	
;  186				teamStacks[x][i]++;
	LD	A,(IX+-1)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	(IX+-5),HL
	LD	(IX+-17),HL
	LD	(IX+-23),HL
	LD	BC,HL
	LEA	HL,IX+-11
	ADD	HL,BC
	LD	(IX+-29),HL
	LD	A,(IX+-2)
	UEXT	HL
	LD	L,A
	LD	BC,(IX+-29)
	ADD	HL,BC
	LD	(IX+-26),HL
	LD	B,(HL)
	LD	A,(IX+-2)
	UEXT	HL
	LD	L,A
	LD	DE,(IX+-29)
	ADD	HL,DE
	INC	B
	LD	(HL),B
;  187				future[x][i][CUBE_STACK] = x == 1 ? calcScore(towers, enemyStack, a, x+1) : calcScore(towers, teamStacks[x], a, x+1);
	LD	A,(IX+-1)
	CP	A,1
	JR	NZ,L_194
	LD	A,(IX+-1)
	UEXT	HL
	LD	L,A
	INC	HL
	PUSH	HL
	LD	BC,(IX+18)
	PUSH	BC
	LD	BC,(IX+15)
	PUSH	BC
	LD	BC,(IX+9)
	PUSH	BC
	CALL	_calcScore
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	UEXT	HL
	LD	L,A
	LD	(IX+-20),HL
	JR	L_195
L_194:
	LD	BC,(IX+-5)
	LD	(IX+-17),BC
	LD	BC,(IX+-5)
	LD	(IX+-23),BC
	LD	A,(IX+-1)
	UEXT	HL
	LD	L,A
	INC	HL
	PUSH	HL
	LD	BC,(IX+18)
	PUSH	BC
	LD	BC,(IX+-5)
	LEA	HL,IX+-11
	ADD	HL,BC
	PUSH	HL
	LD	BC,(IX+9)
	PUSH	BC
	CALL	_calcScore
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	UEXT	HL
	LD	L,A
	LD	(IX+-20),HL
L_195:
	LD	A,(IX+-1)
	UEXT	HL
	LD	L,A
	LD	A,9
	CALL	__imul_b
	LD	BC,(IX+6)
	ADD	HL,BC
	LD	BC,HL
	LD	A,(IX+-2)
	UEXT	HL
	LD	L,A
	LD	DE,HL
	ADD	HL,HL
	ADD	HL,DE
	ADD	HL,BC
	LD	A,(IX+-20)
	LD	(HL),A
;  188				teamStacks[x][i]--;
	LD	BC,(IX+-17)
	LEA	HL,IX+-11
	ADD	HL,BC
	LD	(IX+-41),HL
	LD	A,(IX+-2)
	UEXT	HL
	LD	L,A
	LD	BC,(IX+-41)
	ADD	HL,BC
	LD	(IX+-38),HL
	LD	A,(IX+-2)
	UEXT	HL
	LD	L,A
	LD	IY,(IX+-38)
	LD	BC,(IX+-41)
	ADD	HL,BC
	LD	A,(IY)
	DEC	A
	LD	(HL),A
;  189	
;  190				tempTower[i]++;
	LD	A,(IX+-2)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LEA	HL,IX+-14
	ADD	HL,BC
	LD	(IX+-35),HL
	LD	A,(HL)
	INC	A
	LD	HL,(IX+-35)
	LD	(HL),A
;  191				future[x][i][TOWER_ADD] = calcScore(tempTower, teamStacks[x], a, x+1);
	LD	A,(IX+-1)
	UEXT	HL
	LD	L,A
	INC	HL
	PUSH	HL
	LD	BC,(IX+18)
	PUSH	BC
	LD	BC,(IX+-41)
	PUSH	BC
	PEA	IX+-14
	CALL	_calcScore
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	B,A
	LD	A,(IX+-1)
	UEXT	HL
	LD	L,A
	LD	A,9
	CALL	__imul_b
	LD	DE,(IX+6)
	ADD	HL,DE
	LD	DE,HL
	LD	A,(IX+-2)
	UEXT	HL
	LD	L,A
	LD	(IX+-50),DE	; spill
	LD	(IX+-53),HL	; spill
	LD	DE,(IX+-50)	; unspill
	ADD	HL,HL
	LD	(IX+-50),DE	; spill
	LD	DE,(IX+-53)	; unspill
	ADD	HL,DE
	LD	DE,(IX+-50)	; unspill
	ADD	HL,DE
	INC	HL
	LD	(HL),B
;  192	
;  193				tempTower[i] -= 2;
	LD	A,(IX+-2)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LEA	HL,IX+-14
	ADD	HL,BC
	LD	(IX+-32),HL
	LD	A,(HL)
	DEC	A
	DEC	A
	LD	HL,(IX+-32)
	LD	(HL),A
;  194				future[x][i][TOWER_REMOVE] = calcScore(tempTower, teamStacks[x], a, x+1);
	LD	A,(IX+-1)
	UEXT	HL
	LD	L,A
	INC	HL
	PUSH	HL
	LD	BC,(IX+18)
	PUSH	BC
	LD	BC,(IX+-23)
	LEA	HL,IX+-11
	ADD	HL,BC
	PUSH	HL
	PEA	IX+-14
	CALL	_calcScore
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	BC,(IX+6)
	LD	D,A
	LD	A,(IX+-1)
	UEXT	HL
	LD	L,A
	LD	A,9
	CALL	__imul_b
	ADD	HL,BC
	LD	BC,HL
	LD	A,(IX+-2)
	UEXT	HL
	LD	L,A
	LD	(IX+-44),BC	; spill
	LD	(IX+-47),HL	; spill
	LD	BC,(IX+-44)	; unspill
	ADD	HL,HL
	LD	(IX+-44),BC	; spill
	LD	BC,(IX+-47)	; unspill
	ADD	HL,BC
	LD	BC,(IX+-44)	; unspill
	ADD	HL,BC
	INC	HL
	INC	HL
	LD	(HL),D
	INC	(IX+-2)
;  195			}
L_200:
	LD	A,(IX+-2)
	CP	A,3
	JR	C,L_198
	INC	(IX+-1)
;  196		}
L_203:
	LD	A,(IX+-1)
	CP	A,2
	JR	C,L_201
	LD	SP,IX
	POP	IX
	RET	


;**************************** _calcFuture ***************************
;Name                         Addr/Register   Size   Type
;_calcScore                          IMPORT  -----   function
;_memcpy                             IMPORT  -----   function
;G_19                                 IX-23      3   variable
;temp192                              IX-20      3   variable
;G_18                                 IX-17      3   variable
;tempTower                            IX-14      3   variable
;teamStacks                           IX-11      6   variable
;G_17                                  IX-5      3   variable
;i                                     IX-2      1   variable
;x                                     IX-1      1   variable
;a                                    IX+18      3   parameter
;enemyStack                           IX+15      3   parameter
;allianceStack                        IX+12      3   parameter
;towers                                IX+9      3   parameter
;future                                IX+6      3   parameter


; Stack Frame Size: 74 (bytes)
;       Spill Code: -1 (instruction)


	XREF _draw:ROM
	XREF _initGUI:ROM
	XREF _gfx_End:ROM
	XREF _gfx_Begin:ROM
	XREF _kb_AnyKey:ROM
	XREF _kb_Scan:ROM
	XREF _memcmp:ROM
	XREF _memcpy:ROM
	XREF __ildix:ROM
	XREF __istix:ROM
	XREF __frameset:ROM
	XREF __icmpzero:ROM
	XREF __case8:ROM
	XREF __imul_b:ROM
	XDEF _calcFuture
	XDEF _calcScore
	XDEF _update
	XDEF _main
	END
